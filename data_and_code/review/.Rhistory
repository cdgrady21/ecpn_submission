print(plot_list[[i]])
dev.off()
}
#############################
# summarize coefs & pvals for each outcome/benefit variable
#############################
all_coefficients <- sapply(qipList, function(x) x$estimate)
all_pvalues <- sapply(qipList, function(x) x$p.value)
all_tstat <- sapply(qipList, function(x) x$statistic)
rownames(all_coefficients) <- c("intercept_coef", "var_coef")
rownames(all_pvalues) <- c("intercept_p", "var_p")
rownames(all_tstat) <- c("intercept_t", "var_t")
# all coefs, pvals, and ts for each outcome across benefit variables
benefit_df <- data.frame(coefs = numeric(0), pvals = numeric(0), tstat = numeric(0))
for(i in 1:length(outcome_list))
{
benefit_df[i,1] <- mean(all_coefficients["var_coef",colnames(all_coefficients)[grepl(paste(outcome_list[i]), colnames(all_coefficients))]])
benefit_df[i,2] <- mean(all_pvalues["var_p",colnames(all_pvalues)[grepl(paste(outcome_list[i]), colnames(all_pvalues))]])
benefit_df[i,3] <- mean(all_tstat["var_t",colnames(all_tstat)[grepl(paste(outcome_list[i]), colnames(all_tstat))]])
}
rownames(benefit_df) <- outcome_list
benefit_df["all",] <- c(NA, mean(all_pvalues["var_p",]), mean(all_tstat["var_t",]))
save(benefit_df, file="benefit_df.Rda")
# all coefs, pvals, and ts for each benefit variable across outcomes
benefitVar_df <- data.frame(coefs = numeric(0), pvals = numeric(0), tstat = numeric(0))
for(i in 1:length(ben_vars))
{
# coefs don't even really make sense because they're not on same scales
benefitVar_df[i,1] <- mean(all_coefficients["var_coef",colnames(all_coefficients)[grepl(paste(ben_vars[i]), colnames(all_coefficients))]])
benefitVar_df[i,2] <- mean(all_pvalues["var_p",colnames(all_pvalues)[grepl(paste(ben_vars[i]), colnames(all_pvalues))]])
benefitVar_df[i,3] <- mean(all_tstat["var_t",colnames(all_tstat)[grepl(paste(ben_vars[i]), colnames(all_tstat))]])
}
rownames(benefitVar_df) <- ben_vars
benefitVar_df["all",] <- c(NA, mean(all_pvalues["var_p",]), mean(all_tstat["var_t",]))
save(benefitVar_df, file="benefitVar_df.Rda")
# all coefs, pvals, and ts for each benefit variable across outcomes, removing PGG
all_coefficients_svy <- all_coefficients[,!grepl("pgp", colnames(all_coefficients))]
all_pvalues_svy <- all_pvalues[,!grepl("pgp", colnames(all_pvalues))]
all_tstat_svy <- all_tstat[,!grepl("pgp", colnames(all_tstat))]
benefitVar_df_svy <- data.frame(coefs = numeric(0), pvals = numeric(0), tstat = numeric(0))
for(i in 1:length(ben_vars))
{
# coef, pval, tstat
benefitVar_df_svy[i,1] <- mean(all_coefficients_svy["var_coef",colnames(all_coefficients_svy)[grepl(paste(ben_vars[i]), colnames(all_coefficients_svy))]])
benefitVar_df_svy[i,2] <- mean(all_pvalues_svy["var_p",colnames(all_pvalues_svy)[grepl(paste(ben_vars[i]), colnames(all_pvalues_svy))]])
benefitVar_df_svy[i,3] <- mean(all_tstat_svy["var_t",colnames(all_tstat_svy)[grepl(paste(ben_vars[i]), colnames(all_tstat_svy))]])
}
rownames(benefitVar_df_svy) <- ben_vars
benefitVar_df_svy["all",] <- c(NA, mean(all_pvalues_svy["var_p",]), mean(all_tstat_svy["var_t",]))
save(benefitVar_df_svy, file="benefitVar_df_svy.Rda")
# Chunk 4
# all (hard to determine a trend across so many tests)
print(qipList)
# coefficients for each outcome across "benefit" variables
## no meaningful trend, but most coefficients positive and pvals below 0.50, so somewhat suggestive that benefiting from the project added to improved attitudes though certainly doesn't explain them entirely.
benefit_df
# coefficients for each "benefit variables" across outcomes
## no meaningful trend, but coef/tstat/pval could be affected by PGG being weird negative outcome
benefitVar_df
# coefficients for each "benefit variables" across outcomes, removing PGG
## no clear trend, seems slightly suggestive that benefiting weakly improved outcomes.
benefitVar_df_svy
# Chunk 5
# obvious: control group is all NA or 0 for borehole use/aware.
table(ag.df$qip_group.borehole_use_end>0, ag.df$treatment, exclude=c())
# robustness checks
## make a version thats all thats all 0 if NA (NA really means they didnt benefit)
ag.df$qip_group.borehole_use_end <- ifelse(is.na(ag.df$qip_group.borehole_use_end), 0, ag.df$qip_group.borehole_use_end)
ag.df$qip_group.borehole_aware_end <- ifelse(is.na(ag.df$qip_group.borehole_aware_end), 0, ag.df$qip_group.borehole_aware_end)
ag.df$qip_ben_end <- ifelse(is.na(ag.df$qip_ben_end), 0, ag.df$qip_ben_end)
ag.df$qip_aware_end <- ifelse(is.na(ag.df$qip_aware_end), 0, ag.df$qip_aware_end)
# run above code with robustness check var, save lists with "_0" at end.
load(file="qip_list_0.Rda")
load(file="plot_list_0.Rda")
load(file="benefit_df.Rda")
load(file="benefitVar_df.Rda")
# Chunk 6
# make ben past variable
ag.df$ben_past <- ifelse(ag.df$state %in% "ben" & ag.df$farm_past %in% "past", 1, 0)
# Benue pastoralists: are they less aware and do they use/benefit from projects less?
## yes, they are less aware and use the borehole less (mixed on other project, which was done earlier)
lm_robust(qip_group.borehole_use_end~ben_past,
clusters = psu, data=ag.df[ag.df$treatment %in% 1,])
lm_robust(qip_group.borehole_aware_end~ben_past,
clusters = psu, data=ag.df[ag.df$treatment %in% 1,])
lm_robust(qip_aware_end~ben_past,
clusters = psu, data=ag.df[ag.df$treatment %in% 1,])
lm_robust(qip_ben_end~ben_past,
clusters = psu, data=ag.df[ag.df$treatment %in% 1,])
# benue pastoralist differences?
## is the TR effect weaker among Benue pastoralists?
## chris: is this reg correct?  Or should it just be all benue pastoralists?  Or should it only be TR Ben pastoralists (rather than TR interaction, seeing if TR effect is weaker among Ben Pastoralists)?
benPastList <- vector(mode="list", length=length(outcome_list_qip))
names(benPastList) <- paste(outcome_list_qip)
for(i in 1:length(outcome_list_qip))
{
# thelm
thelm <- lm_robust(ag.df[,outcome_list_qip[i]]~ben_past*treatment,
clusters = psu, data=ag.df)
# tidy it, grab term, coef, pval
lm_res <- tidy(thelm)[, c(1,2,5,4)]
# save to list
benPastList[[i]] <- lm_res
}
save(benPastList, file="benPast_list.Rda")
# Chunk 7
print(benPastList)
benPast_pvalues <- sapply(benPastList, function(x) x$p.value)
benPast_tstat <- sapply(benPastList, function(x) x$statistic)
rownames(benPast_pvalues) <- c("intercept_p", "ben_past_p", "tr_p", "benpast:tr_p")
rownames(benPast_tstat) <- c("intercept_t", "ben_past_t", "tr_t", "benpast:tr_t")
mean(benPast_pvalues['benpast:tr_p',])
mean(benPast_tstat['benpast:tr_t',])
# Chunk 8
# from g-aggAnalysis-mainOutcomes.rmd
# comm
load("../survey_dat/d_analysis/list_of_coefs_and_ps.rda")
load("../obs_dat/b_analysis/obsDat_truePs.rda")
## add "base" var to PGG outcomes
newList[[6]]$base <- c(1,rep(0,3))
newList[[7]]$base <- c(1,rep(0,3))
## make list of ps
commListPs <- sapply(newList, function(x) x$truep[x$base %in% 1])
commListPs <- c(commListPs, obsDat_truePs$truep)
names(commListPs) <- c(outcome_list, rownames(obsDat_truePs))
# rebecca
## separate into our hypothesis families
### contact
p.adjust(commListPs[c(3,4,8:10)], method="none")
p.adjust(commListPs[c(3,4,8:10)], method="fdr")
p.adjust(commListPs[c(3,4,8:10)], method="holm")
### insecurity (its own family, could consider it an attitude)
p.adjust(commListPs[c(1,2,5)], method="none")
p.adjust(commListPs[c(1,2,5)], method="fdr")
p.adjust(commListPs[c(1,2,5)], method="holm")
### attitudes
p.adjust(commListPs[c(1,5)], method="none")
p.adjust(commListPs[c(1,5)], method="fdr")
p.adjust(commListPs[c(1,5)], method="holm")
### cooperation
p.adjust(commListPs[c(6,7)], method="none")
p.adjust(commListPs[c(6,7)], method="fdr")
p.adjust(commListPs[c(6,7)], method="holm")
### all
p.adjust(p=commListPs, method = "none")
p.adjust(p=commListPs, method = "fdr")
p.adjust(p=commListPs, method = "holm")
# Chunk 9
## ind
load("../survey_dat/d_analysis/list_of_coefs_and_ps_ind.rda")
## add "base" var to PGG outcomes
newList_ind[[4]]$base <- c(rep(1,2),rep(0,6))
newList_ind[[5]]$base <- c(rep(1,2),rep(0,6))
# only interested in participant-control differences
indListPs <- sapply(newList_ind, function(x) x$truep[x$base %in% 1 & grepl("-part", rownames(x))])
names(indListPs) <- c(outcome_list[c(1:3,6:7)])
# not enough outcomes to really have families, but pgg vs not
# atts, insecurity, contact
p.adjust(p=indListPs[1:3], method = "none")
p.adjust(p=indListPs[1:3], method = "fdr")
p.adjust(p=indListPs[1:3], method = "holm")
# pgg
p.adjust(p=indListPs[4:5], method = "none")
p.adjust(p=indListPs[4:5], method = "fdr")
p.adjust(p=indListPs[4:5], method = "holm")
### all
p.adjust(p=indListPs, method = "none")
p.adjust(p=indListPs, method = "fdr")
p.adjust(p=indListPs, method = "holm")
# Chunk 10
# my original power analysis was bad. so inefficient and slow, so overcomplicated
# use our strongest outcome, insecurity.
#var=outcome_list_qip[2]; tau=0.2
bigPow.fn <-function(nsims, var=outcome_list_qip[2], tau)
{
newPow.fn <- function(var, tau)
{
# 6 TR sites from Nas, 4 from Ben
newtr_nas <- sample(unique(ag.df$psu[ag.df$state %in% "nas"]), size=6)
newtr_ben <- sample(unique(ag.df$psu[ag.df$state %in% "ben"]), size=4)
newtr <- c(as.character(newtr_nas), as.character(newtr_ben))
df <- ag.df
df[,"newtr"] <- ifelse(df$psu %in% newtr, 1, 0)
# make endline outcome with TR effect tau
df[, paste0(var,"_end")] <- (df[,paste0(var,"_end")]-mean(df[,paste0(var,"_end")]))/sd(df[,paste0(var,"_end")])
#scale(df[,paste0(var,"_end")])
df[df$newtr %in% 1, paste0(var,"_end")] <- df[df$newtr %in% 1, paste0(var,"_end")]+tau
# for baseline control, also scale
df[, paste0(var,"_base")] <- (df[,paste0(var,"_base")]-mean(df[,paste0(var,"_base")]))/sd(df[,paste0(var,"_base")])
# lm
lm1 <- lm_robust(df[,paste0(var,"_end")]~df[,'newtr']+df[,paste0(var,"_base")]+state,
clusters = psu, data=df)
want <- tidy(lm1)[2,5]
return(want)
}
check <- do(nsims)*newPow.fn(var=var, tau=tau)
pval <- mean(check<0.05)
return(pval)
}
#bigPow.fn(nsims=100, tau=0.7)
# Chunk 12
load("new_power.Rdata")
# Chunk 13
# not the case that there is one big drop in control communities
## attitudes
summary(ag.df$attitude_cw[ag.df$treatment %in% 1])
summary(ag.df$attitude_cw[ag.df$treatment %in% 0])
# Chunk 14
## contact
summary(ag.df$contactOnly_cw[ag.df$treatment %in% 1])
summary(ag.df$contactOnly_cw[ag.df$treatment %in% 0])
# Chunk 15
## insecurity
summary(ag.df$in_cw[ag.df$treatment %in% 1])
summary(ag.df$in_cw[ag.df$treatment %in% 0])
# Chunk 16
# Events: pastoralists index
summary(events$pastoralists_index_rank[events$treatment %in% 1 &
events$time %in% 0])
summary(events$pastoralists_index_rank[events$treatment %in% 1 &
events$time %in% 1])
summary(events$pastoralists_index_rank[events$treatment %in% 0 &
events$time %in% 0])
summary(events$pastoralists_index_rank[events$treatment %in% 0 &
events$time %in% 1])
# Chunk 17
# For exact p-values: Appendix B for community-level analysis, Appendix C for individual-level.
# Chunk 18
#violence_effect
with(rand.df[rand.df$survey %in% 0,], prop.table(table(violence_effect_num, treatment),2))
with(rand.df[rand.df$survey %in% 1,], prop.table(table(violence_effect_num, treatment),2))
# violence work effect
with(rand.df[rand.df$survey %in% 0,], prop.table(table(violence_work_effect, treatment),2))
with(rand.df[rand.df$survey %in% 1,], prop.table(table(violence_work_effect, treatment),2))
# Chunk 19
### robustness checks without hadiza/israel
load("../obs_dat/b_analysis/obsDat_truePs_rb.rda")
### robustness checks with only hadiza/israel
load("../obs_dat/b_analysis/obsDat_truePs_had.rda")
# without
behObs_enumsCheck <- rbind(mark_pasts, mark_pasts_rb,
mark_farms, mark_farms_rb,
out_ind, out_ind_rb)
colnames(behObs_enumsCheck) <- c("coefficient", "p-value")
rownames(behObs_enumsCheck) <- c("market-pastoralists_all",
"market-pastoralists_without",
"market-farmers_all",
"market-farmers_without",
"events-outgroup_all",
"events-outgroup_without")
behObs_enumsCheck <- round(behObs_enumsCheck,3)
behObs_enumsCheck_tab <- knitr::kable(behObs_enumsCheck, format="latex")
# only them
behObs_enumsOnly <- rbind(mark_pasts_had, mark_farms_had, out_ind_had)
colnames(behObs_enumsOnly) <- c("coefficient", "p-value")
rownames(behObs_enumsOnly) <- c("market-pastoralists_enum",
"market-farmers_enum",
"events-outgroup_enum")
# table showing demographic characteristics of fulani vs farmers: (1) overall, (2) benue, (3) nasarawa
## make variables
rand.df$christian <- ifelse(rand.df$religion %in% "christian", 1, 0)
rand.df$farming <- ifelse(rand.df$occupation %in% "farm|both", 1, 0)
rand.df$pastoralism <- ifelse(rand.df$religion %in% "pastor|both", 1, 0)
#function to show: age, gender, income, house_size, ethnic, religion, occupation, radio
## List of group variables and summary variables
group_vars <- c("farm_pastor", "state", "survey")
summary_vars <- c("age", "female", "income_month", "select_grp.house_size",
"ethnic2fulani", "christian", "farming", "pastoralism", "radio")
test <- df %>% select(c(group_vars,summary_vars)) %>%
group_by(paste(group_vars, collapse=",")) %>%
summarise(across(everything(), list(mean = mean, na.rm=T, sd = sd, na.rm=T)))
library(dplyr)
test <- df %>% select(c(group_vars,summary_vars)) %>%
group_by(paste(group_vars, collapse=",")) %>%
summarise(across(everything(), list(mean = mean, na.rm=T, sd = sd, na.rm=T)))
test <- df %>%select(all_of(group_vars,summary_vars)) %>%
group_by(paste(group_vars, collapse=",")) %>%
summarise(across(everything(), list(mean = mean, na.rm=T, sd = sd, na.rm=T)))
test <- df %>% dplyr::select(all_of(group_vars,summary_vars)) %>%
group_by(paste(group_vars, collapse=",")) %>%
summarise(across(everything(), list(mean = mean, na.rm=T, sd = sd, na.rm=T)))
df=rand.df
test <- df %>% dplyr::select(c(group_vars,summary_vars)) %>%
group_by(paste(group_vars, collapse=",")) %>%
summarise(across(everything(), list(mean = mean, na.rm=T, sd = sd, na.rm=T)))
test <- df %>% dplyr::select(all_of(group_vars,summary_vars)) %>%
group_by(paste(group_vars, collapse=",")) %>%
summarise(across(everything(), list(mean = mean, na.rm=T, sd = sd, na.rm=T)))
test <- df %>% dplyr::select(group_vars,summary_vars) %>%
group_by(paste(group_vars, collapse=",")) %>%
summarise(across(everything(), list(mean = mean, na.rm=T, sd = sd, na.rm=T)))
table(df$farm_pastor, exclude=c())
test <- df %>% dplyr::select(group_vars,summary_vars) %>%
group_by(group_vars) %>%
summarise(across(everything(), list(mean = mean, na.rm=T, sd = sd, na.rm=T)))
?across
test <- df %>% dplyr::select(group_vars,summary_vars) %>%
test <- df %>% dplyr::select(group_vars,summary_vars) %>%
)
test <- df %>% dplyr::select(group_vars,summary_vars) %>%
group_by(paste(group_vars, collapse=",")) %>%
summarise(across(everything(), list(mean = mean, na.rm=T)))
sapply(rand.df[,group_vars], class)
sapply(rand.df[,summary_vars], class)
#function to show: age, gender, income, house_size, ethnic, religion, occupation, radio
## List of group variables and summary variables
group_vars <- c("farm_pastor", "state", "survey")
summary_vars <- c("age", "female", "income_month",
"ethnic2fulani", "christian", "farming", "pastoralism", "radio")
test <- df %>% dplyr::select(group_vars,summary_vars) %>%
group_by(paste(group_vars, collapse=",")) %>%
summarise(across(everything(), list(mean = mean, na.rm=T)))
test <- df %>% dplyr::select(group_vars,summary_vars) %>%
group_by(paste(group_vars, collapse=",")) %>%
summarise(across(everything(), list(mean, na.rm=T)))
test <- df %>% dplyr::select(group_vars,summary_vars) %>%
group_by(paste(group_vars, collapse=",")) %>%
summarise(across(everything(), mean, na.rm=T))
test
paste(group_vars, collapse=",")
test <- df %>% dplyr::select(group_vars,summary_vars) %>%
test <- df %>% dplyr::select(group_vars,summary_vars) %>%
group_by(farm_pastor, state, survey) %>%
summarise(across(everything(), mean, na.rm=T))
test <- df %>% dplyr::select(group_vars,summary_vars) %>%
group_by(farm_pastor, state, survey) %>%
summarise(across(everything(), mean, na.rm=T))
table(rand.df$survey)
df$survey <- as.factor(df$survey)
table(df$survey)
test <- df %>% dplyr::select(group_vars,summary_vars) %>%
group_by(farm_pastor, state, survey) %>%
summarise(across(everything(), mean, na.rm=T))
test
df$survey <- ifelse(df$survey %in% 0, "baseline", "endline")
test <- df %>% dplyr::select(group_vars,summary_vars) %>%
group_by(farm_pastor, state, survey) %>%
summarise(across(everything(), mean, na.rm=T))
test <- df %>% dplyr::select(group_vars,summary_vars) %>%
group_by(farm_pastor, survey, state) %>%
summarise(across(everything(), mean, na.rm=T))
table(df$farm_pastor, df$state, df$survey)
## List of group variables and summary variables
group_vars <- c("farm_pastor", "state", "survey")
summary_vars <- c("age", "female", "income_month",
"ethnic2fulani", "christian", "farming", "pastoralism", "radio")
test <- df %>% dplyr::select(group_vars,summary_vars) %>%
group_by(farm_pastor, survey, state) %>%
summarise(across(everything(), mean, na.rm=T))
test
table(df$farm_pastor, df$pastoralism)
# table showing demographic characteristics of fulani vs farmers: (1) overall, (2) benue, (3) nasarawa
## make variables
rand.df$survey <- ifelse(rand.df$survey %in% 0, "baseline", "endline")
rand.df$christian <- ifelse(rand.df$religion %in% "christian", 1, 0)
rand.df$farming <- ifelse(rand.df$occupation %in% "farm|both", 1, 0)
rand.df$pastoralism <- ifelse(rand.df$occupation %in% "pastor|both", 1, 0)
#function to show: age, gender, income, house_size, ethnic, religion, occupation, radio
test <- df %>% dplyr::select(group_vars,summary_vars) %>%
group_by(farm_pastor, survey, state) %>%
summarise(across(everything(), mean, na.rm=T))
test
#function to show: age, gender, income, house_size, ethnic, religion, occupation, radio
test <- rand.df %>% dplyr::select(group_vars,summary_vars) %>%
group_by(farm_pastor, survey, state) %>%
summarise(across(everything(), mean, na.rm=T))
test
table(rand.df$farm_pastor, rand.df$pastoralism)
table(rand.df$occupation)
levels(rand.df$occupation)
rand.df$pastoralism <- ifelse(rand.df$occupation %in% c("pastor","both"), 1, 0)
table(rand.df$farm_pastor, rand.df$pastoralism)
table(rand.df$farm_pastor)
table(rand.df$farming)
rand.df$farming <- ifelse(rand.df$occupation %in% c("farm","both"), 1, 0)
# table showing demographic characteristics of fulani vs farmers: (1) overall, (2) benue, (3) nasarawa
## make variables
rand.df$survey <- ifelse(rand.df$survey %in% 0, "baseline", "endline")
rand.df$christian <- ifelse(rand.df$religion %in% "christian", 1, 0)
rand.df$farming <- ifelse(rand.df$occupation %in% c("farm","both"), 1, 0)
rand.df$pastoralism <- ifelse(rand.df$occupation %in% c("pastor","both"), 1, 0)
## List of group variables and summary variables
group_vars <- c("farm_pastor", "state", "survey")
summary_vars <- c("age", "female", "income_month",
"ethnic2fulani", "christian", "farming", "pastoralism", "radio")
#function to show: age, gender, income, house_size, ethnic, religion, occupation, radio
test <- rand.df %>% dplyr::select(group_vars,summary_vars) %>%
group_by(farm_pastor, survey, state) %>%
summarise(across(everything(), mean, na.rm=T))
test
table(rand.df$survey)
# Load data I anticipate needing
load("../survey_dat/c_creating_dataframes/f-aggregateComms_ap.Rdata")
load("../survey_dat/c_creating_dataframes/rand_df.Rdata")
load("../survey_dat/b_creating_outcomes/f2-panelData.Rdata")
load("../obs_dat/b_analysis/eventsMedian.Rdata")
load("../obs_dat/b_analysis/marketMedian.Rdata")
# clean environment
rm(list=ls(pattern="Var|var|.fun|Fun|Col|Index|Indice|Stand|fmla|outcomes"))
# Functions
## True p-value function.
load("../survey_dat/d_analysis/true_fun.rda")
# make variables
ag.df$farm_past <- ifelse(grepl(".farmers", ag.df$comm), "farm", "past")
# table showing demographic characteristics of fulani vs farmers: (1) overall, (2) benue, (3) nasarawa
## make variables
rand.df$survey <- ifelse(rand.df$survey %in% 0, "baseline", "endline")
rand.df$christian <- ifelse(rand.df$religion %in% "christian", 1, 0)
rand.df$farming <- ifelse(rand.df$occupation %in% c("farm","both"), 1, 0)
rand.df$pastoralism <- ifelse(rand.df$occupation %in% c("pastor","both"), 1, 0)
## List of group variables and summary variables
group_vars <- c("farm_pastor", "state", "survey")
summary_vars <- c("age", "female", "income_month",
"ethnic2fulani", "christian", "farming", "pastoralism", "radio")
#function to show: age, gender, income, house_size, ethnic, religion, occupation, radio
test <- rand.df %>% dplyr::select(group_vars,summary_vars) %>%
group_by(farm_pastor, survey, state) %>%
summarise(across(everything(), mean, na.rm=T))
test
rand.df$muslim <- ifelse(rand.df$religion %in% "muslim", 1, 0)
## List of group variables and summary variables
group_vars <- c("farm_pastor", "state", "survey")
summary_vars <- c("age", "female", "income_month",
"ethnic2fulani", "christian", "muslim",
"farming", "pastoralism", "radio")
#function to show: age, gender, income, house_size, ethnic, religion, occupation, radio
test <- rand.df %>% dplyr::select(group_vars,summary_vars) %>%
group_by(farm_pastor, survey, state) %>%
summarise(across(everything(), mean, na.rm=T))
test
#function to show: age, gender, income, house_size, ethnic, religion, occupation, radio
df <- rand.df %>% dplyr::select(group_vars,summary_vars) %>%
group_by(farm_pastor, survey, state) %>%
summarise(across(everything(), mean, na.rm=T))
# overall
rand.df %>% group_by(farm_pastor, survey, state) %>%
summarise(across(everything(), mean, na.rm=T))
# overall
rand.df %>% dplyr::select(group_vars,summary_vars) %>%
summarise(across(everything(), mean, na.rm=T))
# overall
rand.df %>% dplyr::select(summary_vars) %>%
summarise(across(everything(), mean, na.rm=T))
# overall
rand.df %>% dplyr::select(group_vars,summary_vars) %>%
group_by(farm_pastor) %>%
summarise(across(everything(), mean, na.rm=T))
# overall
rand.df %>% dplyr::select(farm_pastor,summary_vars) %>%
group_by(farm_pastor) %>%
summarise(across(everything(), mean, na.rm=T))
# by state
rand.df %>% dplyr::select(farm_pastor, state,summary_vars) %>%
group_by(farm_pastor, state) %>%
summarise(across(everything(), mean, na.rm=T))
#show: age, gender, income, house_size, ethnic, religion, occupation, radio
# overall
demo_tab_overall <- rand.df %>% dplyr::select(farm_pastor,summary_vars) %>%
group_by(farm_pastor) %>%
summarise(across(everything(), mean, na.rm=T))
# by state
demo_tab_state <- rand.df %>% dplyr::select(farm_pastor, state,summary_vars) %>%
group_by(farm_pastor, state) %>%
summarise(across(everything(), mean, na.rm=T))
# tables
demo_tab_overall1 <- knitr::kable(demo_tab_overall, format="latex")
demo_tab_overall1
demo_tab_state1 <- knitr::kable(demo_tab_state, format="latex")
demo_tab_overall
demo_tab_state
rand.df$fulani <- rand.df$ethnic2fulani
## List of group variables and summary variables
group_vars <- c("farm_pastor", "state", "survey")
summary_vars <- c("age", "female", "income_month",
"fulani", "christian", "muslim",
"farming", "pastoralism", "radio")
#show: age, gender, income, house_size, ethnic, religion, occupation, radio
# overall
demo_tab_overall <- rand.df %>% dplyr::select(farm_pastor,summary_vars) %>%
group_by(farm_pastor) %>%
summarise(across(everything(), mean, na.rm=T))
# by state
demo_tab_state <- rand.df %>% dplyr::select(farm_pastor, state,summary_vars) %>%
group_by(farm_pastor, state) %>%
summarise(across(everything(), mean, na.rm=T))
demo_tab_state
demo_tab_overall
# tables
demo_tab_overall1 <- knitr::kable(demo_tab_overall, format="latex")
demo_tab_state1 <- knitr::kable(demo_tab_state, format="latex")
demo_tab_state1
demo_tab_state
table(rand.df$occupation)
rand.df$trading <- ifelse(rand.df$occupation %in% "trade", 1, 0)
summary_vars <- c("age", "female", "income_month",
"fulani", "christian", "muslim",
"farming", "pastoralism", "trading",
"radio")
#show: age, gender, income, house_size, ethnic, religion, occupation, radio
# overall
demo_tab_overall <- rand.df %>% dplyr::select(farm_pastor,summary_vars) %>%
group_by(farm_pastor) %>%
summarise(across(everything(), mean, na.rm=T))
# by state
demo_tab_state <- rand.df %>% dplyr::select(farm_pastor, state,summary_vars) %>%
group_by(farm_pastor, state) %>%
summarise(across(everything(), mean, na.rm=T))
demo_tab_overall
demo_tab_state
# tables
demo_tab_overall1 <- knitr::kable(demo_tab_overall, format="latex")
demo_tab_state1 <- knitr::kable(demo_tab_state, format="latex")
