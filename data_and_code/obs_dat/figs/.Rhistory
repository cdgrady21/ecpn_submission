one
class(once)
mean(one$one.fun)
mean(bag)
# one pull from bag
one.fun <- function()
{
once <- sample(bag,1,replace=F)
return(once)
}
one <- do(10000)*one.fun()
mean(one$one.fun)
mean(bag)
quantile(bag,0.25)
quantile(bag,0.20)
quantile(bag,0.10)
quantile(bag,0.05)
twice <- sample(bag,2,replace=F)
twice
best <- max(twice)
best
## two pulls from bag
two.fun <- function()
{
twice <- sample(bag,2,replace=F)
best <- max(twice)
return(best)
}
two <- do(10000)*two.fun()
two
mean(two$two.fun)
mean(bag)-mean(two$two.fun)
# mean of two pulls is 1 higher than with 1 pull
quantile(two$two.fun,0.25)
# must be +2 for a 75% chance to pass test
quantile(two$two.fun,0.10)
# must be +2 for a 90% chance to pass test
quantile(two$two.fun,0.05)
length(bag)
1/17
# Quantile Comparison
quantile(bag,seq(0,1,0.1))
# Quantile Comparison
quantile(bag,seq(0,1,0.05))
quantile(two$two.fun,seq(0,1,0.05))
# must be +3 for a 75% chance to pass test
quantile(bag,0)
# must be +2 for a 90% chance to pass test
quantile(two$two.fun,0)
# must be +2 for a 90% chance to pass test
quantile(two$two.fun,0.05)
# must be +3 for a 95% chance to pass test
quantile(two$two.fun,0)
# Quantile Comparison
quantile(bag,seq(0,1,0.05))
quantile(two$two.fun,seq(0,1,0.05))
# Quantile Comparison
one_pull <- quantile(bag,seq(0,1,0.05))
two_pull <- quantile(two$two.fun,seq(0,1,0.05))
plot(one_pull)
plot(two_pull)
qqplot(one_pull,two_pull)
# plots
one_plot <- sample(bag,10000,replace=T)
one_plot
plot(one_plot)
plot(density(one_plot))
hist(one_plot)
hist(two$two.fun)
hist(one_plot, col="red")
mycol <- rgb(0, 0, 255, max = 255, alpha = 125, names = "blue50")
hist(two$two.fun, col=mycol)
hist1 <- hist(one_plot, col="red")
hist2 <- hist(two$two.fun, col=mycol)
hist1 <- hist(one_plot, col=c1)
# plots
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lt.pink")
hist1 <- hist(one_plot, col=c1)
hist2 <- hist(two$two.fun, col=c2)
plot(hist1)
plot(hist1, col=c1)
plot(hist2, col=c2, add=T)
plot(hist1, col=c1, xlim=c(-5,1))
plot(hist2, col=c2, add=T)
plot(hist2, col=c2, xlim=c(-5,1), add=T)
plot(hist1, col=c1, xlim=c(-5,1))
plot(hist2, col=c2, xlim=c(-5,1), add=T)
plot(hist1, col=c1, breaks=6, xlim=c(-5,1))
hist1 <- hist(one_plot, col=c1, breaks=6,)
hist1 <- hist(one_plot, col=c1, breaks=6)
hist1 <- hist(one_plot, col=c1, breaks=7)
hist1 <- hist(one_plot, col=c1, breaks=5)
?breaks
?hist
unique(bag)
paste(unique(bag))
paste(unique(bag), collapse=",")
hist1 <- hist(one_plot, col=c1, breaks=c(-5,-4,-3,-2,-1,0,1))
hist1 <- hist(one_plot, col=c1, breaks=c(-6,-5,-4,-3,-2,-1,0,1,2))
hist1 <- hist(one_plot, col=c1, breaks=c(-6,-5,-4,-3,-2,-1,0,1))
hist1 <- hist(one_plot, col=c1, breaks=c(-6,-5,-4,-3,-2,-1,0,1))
hist2 <- hist(two$two.fun, col=c2, breaks=c(-6,-5,-4,-3,-2,-1,0,1))
plot(hist1, col=c1)
plot(hist2, col=c2, add=T)
hist1 <- hist(one_plot, col=c1, breaks=c(-6,-5,-4,-3,-2,-1,0,1))
hist2 <- hist(two$two.fun, col=c2, breaks=c(-6,-5,-4,-3,-2,-1,0,1))
plot(hist1, col=c1)
plot(hist2, col=c2, add=T)
# Quantile Comparison
one_pull <- quantile(bag,seq(0,1,0.05))
two_pull <- quantile(two$two.fun,seq(0,1,0.05))
# Quantile Comparison
(one_pull <- quantile(bag,seq(0,1,0.05)))
(two_pull <- quantile(two$two.fun,seq(0,1,0.05)))
length(bag)
bag[1:16]
# GROTESQUE STATUE
bag <- c(1,1,0,0,-1,-1,-1,-2,-2,-3,-4,-2,-2,-2,-4,-4,-5)
library(mosaic)
# one pull from bag
mean(bag)
quantile(bag,0.25)
# must be +3 for a 75% chance to pass test
quantile(bag,0.10)
## two pulls from bag
two.fun <- function()
{
twice <- sample(bag,2,replace=F)
best <- max(twice)
return(best)
}
two <- do(10000)*two.fun()
mean(two$two.fun)
mean(bag)-mean(two$two.fun)
# mean of two pulls is 1 higher than with 1 pull
quantile(two$two.fun,0.25)
# must be +2 for a 75% chance to pass test
quantile(two$two.fun,0.10)
# must be +2 for a 90% chance to pass test
quantile(two$two.fun,0.05)
# must be +3 for a 95% chance to pass test
quantile(two$two.fun,0)
# Quantile Comparison
(one_pull <- quantile(bag,seq(0,1,0.05)))
# Quantile Comparison
(one_pull <- quantile(bag,seq(0,1,0.05)))
1/17
4/17
# plots
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lt.pink")
one_plot <- sample(bag,10000,replace=T)
hist1 <- hist(one_plot, col=c1, breaks=c(-6,-5,-4,-3,-2,-1,0,1))
hist2 <- hist(two$two.fun, col=c2, breaks=c(-6,-5,-4,-3,-2,-1,0,1))
plot(hist1, col=c1)
plot(hist2, col=c2, add=T)
bag[1:16]
# Compare to +2 to skill test
bag2 <- c(bag[1:16]+2, bag[17])
bag2
mean(bag2)
mean(two$two.fun)
(plus2 <- quantile(bag2,seq(0,1,0.05)))
# Quantile Comparison
(one_pull <- quantile(bag,seq(0,1,0.05)))
(two_pull <- quantile(two$two.fun,seq(0,1,0.05)))
# Quantile Comparison
(one_pull <- quantile(bag,seq(0,1,0.05)))
(two_pull <- quantile(two$two.fun,seq(0,1,0.05)))
(plus2 <- quantile(bag2,seq(0,1,0.05)))
184/8
6*80
175*80
175/2
5200*12
62400/100000
3000*12
40000/100000
11000000/.03
38+32+35
14/16
200000/10000000
84+78
120000/700000
?sample
roll1 <- rep(sample(1:6,1))
roll1 <- rep(sample(1:6,1))
roll1
roll1 <- rep(sample(1:6,1),6)
roll1
roll1 <- sample(1:6,6)
roll1
sum1 <- sum(roll1==1)
sum1
roll1
roll1 <- c(1,1,1,2,2,2)
roll1
sum(roll1==1)
roll1 <- sample(1:6,6)
roll1
roll1 <- sample(1:6,6, replace=T)
roll1
sum1 <- sum(roll1==1)
sum1
roll1 <- sample(1:6,6, replace=T)
roll1
roll1 <- sample(1:6,6, replace=T)
roll1
sum1 <- sum(roll1==1)
sum1
6-sum1
roll2 <- sample(1:6,6-sum1)
roll2
sum2 <- sum(roll2==1)
sum2
roll3 <- sample(1:6,6-(sum1+sum2))
roll3
sum(roll1,roll2,roll3)
roll1
sum(sum1,sum2,sum3)
sum3 <- sum(roll3==1)
sum(sum1,sum2,sum3)
sum1+sum2+sum3
tokyo.fun <- function()
{
roll1 <- sample(1:6,6, replace=T)
sum1 <- sum(roll1==1)
roll2 <- sample(1:6,6-sum1)
sum2 <- sum(roll2==1)
roll3 <- sample(1:6,6-(sum1+sum2))
sum3 <- sum(roll3==1)
return(sum(sum1,sum2,sum3))
#return(sum1+sum2+sum3)
}
?replicate
tokyo.fun()
tokyo.fun()
tokyo.fun()
tokyo.fun()
tokyo.fun()
tokyo.fun()
tokyo.fun()
tokyo.fun()
test <- replicate(10000,tokyo.fun)
test
test <- replicate(10000,tokyo.fun())
test
test <- system.time(replicate(10000,tokyo.fun()))
system.time(replicate(10000,tokyo.fun()))
system.time(replicate(10000,tokyo.fun()))
system.time(replicate(10000,tokyo.fun()))
system.time(replicate(10000,tokyo.fun()))
tokyo.fun <- function()
{
roll1 <- sample(1:6,6, replace=T)
sum1 <- sum(roll1==1)
roll2 <- sample(1:6,6-sum1)
sum2 <- sum(roll2==1)
roll3 <- sample(1:6,6-(sum1+sum2))
sum3 <- sum(roll3==1)
#return(sum(sum1,sum2,sum3))
return(sum1+sum2+sum3)
}
system.time(replicate(10000,tokyo.fun()))
system.time(replicate(10000,tokyo.fun()))
system.time(replicate(10000,tokyo.fun()))
system.time(replicate(10000,tokyo.fun()))
str(test)
test[1:5]
test <- replicate(10000,tokyo.fun())
test[1:5]
summary(test)
plot(frequency(test))
plot(density(test))
#plot(density(test))
hist(test)
?quantile
#plot(density(test))
#hist(test)
quantile(test,probs=(1,2,3,4,5,6))
#plot(density(test))
#hist(test)
quantile(test,probs=c(1,2,3,4,5,6)))
#plot(density(test))
#hist(test)
quantile(test,probs=c(1,2,3,4,5,6))
#plot(density(test))
#hist(test)
quantile(test,probs=seq(0,1,0.1))
ecdf(test)(5)
ecdf(test)(2)
ecdf(test)(1.9)
ecdf(test)(3)
ecdf(test)(2)
ecdf(test)
f <- ecdf(test)
f <- ecdf(test)(2)
f
quantile(x,.91)
quantile(test,.91)
f( quantile(test,.91) )
f <- ecdf(test)(2)
f <- ecdf(test)
f( quantile(test,.91) )
# Equivalently:
ecdf(test)( quantile(x,.91) )
# Equivalently:
ecdf(test)( quantile(test,.91) )
ecdf(test)(2)
quantile(test,.91)
# Equivalently:
ecdf(test)( quantile(test,0.5) )
ecdf(test)(2)
quantile(test,0.5)
ecdf(test)(4)
ecdf(test)(3.99)
200*8
200*8
800/3
15*6
3000*5
200*12*5
2500*5
120/650
140/650
120/650
25*30*20
30*30*20
50*60
80*60
20*720
15000/750
50000/360
bag <- c(1,0,0,0,-1,-2,-2,-3,-5,-2,-2,-5,-5,1)
mean(bag)
library(sentimentr)
install_github('trinker/sentimentr')
library(devtools)
install.packages("devtools")
install_github('trinker/sentimentr')
library(devtools)
install.packages("devtools")
install.packages("roxygen2")
install.packages("RTools")
install.packages("roxygen2", type="source")
48/8
65/8
100*(4.54)^30
100*(.0454)^30
100*(.0454^30)
100*(1.0454^30)
100*(1.037^30)
100*(1.05^30)
100*1.05
105*1.05
110.25*1.05
100*(1.05^3)
100*(1.05^30)
100*(1.05^10)
100*(1.02^30)
100*1.010
100*1.010
101*1.010
100*1.005
100*1.015
5+15
100*(1.01^2)
100*(1.0454^30)
100*(1.037^30)
140/30
100*(1.05^30)
100*(1.1^10)
(100*(1.1^10))*(1.02^20)
100*(1.05^30)
5000*.33
145*5
8000*5
63/28
100/28
10*4*100
120*60
10000/120
100*120
35000/800
4000/6
4000/6/10
4000/30
133/6
12000/800
15000/800
20*800
25*800
40000/800
50*80
50*50
7500+4000
24*20
480*30
100000/800
125/15
15000/800
18+8
35*800
30*800
350000/800
40000/800
437/15
24*30*30
40*4*30
100*50
80*50
20*800
60*2*12*25
12*120*25
5*30*24
2*30*24
30*30
90*1
10000/800
40*2*20
40*2*20*12
12000+21600+4800+12500+19200+2000+2000+4000
78100*1.25
78100*.25
50*7
50*14
79600*.25
79600*1.25
99500*1.25
11000/365
setwd("C:/Users/cdgra/Google Drive/Africa/Nigeria - Farmer-Pastoralist/ecpn_work/analysis/academicPaper/obsDat/figs")
setwd("C:/Users/cdgra/Google Drive/Africa/Nigeria - Farmer-Pastoralist/ecpn_work/analysis/academicPaper/obsDat/figs")
rm(list=ls())
load("../clean/a_obsDat_clean.rda")
library(tidyr)
# function to sample groups after dplyr::group_by
sample_n_groups1 = function(tbl, size, replace = TRUE, weight = NULL) {
# regroup when done
grps = tbl %>% groups %>% lapply(as.character) %>% unlist
# check length of groups non-zero
keep = tbl %>% summarise() %>% ungroup() %>% sample_n(size, replace, weight)
keep$new_site <- paste0(keep$site, rownames(keep))
# keep only selected groups, regroup because joins change count.
# regrouping may be unnecessary but joins do something funky to grouping variable
tbl %>% inner_join(keep, by=grps) %>% group_by(.dots = grps)
}
# the lm to get the coefs
fit.star<-lm(pastoralists_index_rank~treatment*time + site, data=markets)
R<-500 # Number of Repetitions
h<-matrix(NA, R, 1)
markets[markets$State %in% "nasarawa" & markets$treatment %in% 1,] %>% group_by(site)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
load("../clean/a_obsDat_clean.rda")
library(tidyr)
library(dplyr)
library(HSPSUtils)
# function to sample groups after dplyr::group_by
sample_n_groups1 = function(tbl, size, replace = TRUE, weight = NULL) {
# regroup when done
grps = tbl %>% groups %>% lapply(as.character) %>% unlist
# check length of groups non-zero
keep = tbl %>% summarise() %>% ungroup() %>% sample_n(size, replace, weight)
keep$new_site <- paste0(keep$site, rownames(keep))
# keep only selected groups, regroup because joins change count.
# regrouping may be unnecessary but joins do something funky to grouping variable
tbl %>% inner_join(keep, by=grps) %>% group_by(.dots = grps)
}
# the lm to get the coefs
fit.star<-lm(pastoralists_index_rank~treatment*time + site, data=markets)
R<-500 # Number of Repetitions
h<-matrix(NA, R, 1)
nas_samp1 <- markets[markets$State %in% "nasarawa" & markets$treatment %in% 1,] %>% group_by(site)
nas_samp1 <- markets[markets$State %in% "nasarawa" & markets$treatment %in% 1,] %>% group_by(site) %>%
HSPSUtils::sample_n_groups(size=6)
HSPSUtils::sample_n_groups
HSPSUtils::sample_n_groups <- function(tbl, size, replace = FALSE, weight = NULL)
{
grps <- tbl %>% groups() %>% lapply(as.character) %>% unlist()
keep <- tbl %>% summarise() %>% ungroup() %>% sample_n(size,
replace, weight)
tbl %>% right_join(keep, by = grps) %>% group_by(.dots = grps)
}
detach("package:HSPSUtils", unload=TRUE)
sample_n_groups <- function(tbl, size, replace = FALSE, weight = NULL)
{
grps <- tbl %>% groups() %>% lapply(as.character) %>% unlist()
keep <- tbl %>% summarise() %>% ungroup() %>% sample_n(size,
replace, weight)
tbl %>% right_join(keep, by = grps) %>% group_by(.dots = grps)
}
nas_samp1 <- markets[markets$State %in% "nasarawa" & markets$treatment %in% 1,] %>% group_by(site) %>%
sample_n_groups(size=6)
sample_n_groups <- function(tbl, size, replace = FALSE, weight = NULL)
{
grps <- tbl %>% groups() %>% lapply(as.character) %>% unlist()
keep <- tbl %>% summarise() %>% ungroup() %>% sample_n(size,
replace, weight)
tbl %>% right_join(keep, by = grps) %>% group_by(grps)
}
nas_samp1 <- markets[markets$State %in% "nasarawa" & markets$treatment %in% 1,] %>% group_by(site) %>%
sample_n_groups(size=6)
nas_samp1 <- markets[markets$State %in% "nasarawa" & markets$treatment %in% 1,] %>% group_by(site)
grps <- nas_samp1 %>% groups() %>% lapply(as.character) %>% unlist()
grps
nas_samp1 %>% summarise()
# regroup when done
grps = nas_samp1 %>% groups %>% lapply(as.character) %>% unlist
grps
nas_samp1 %>% summarise()
