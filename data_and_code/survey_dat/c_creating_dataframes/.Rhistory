df[,threatVars] <- reshape::rescaler(df[,threatVars],type="range")
# Reverse code things that are not yet reversed -- all of them
df[,c(threatVars)] <- df[,threatVars]*-1
# Make Index about Psychological Threat
summary(df[,threatVars])
df$threat_index <- rowMeans(df[,threatVars],na.rm=T)
#psych::alpha(df[,threatVars]) # 0.59, not great, Jim.
# Chunk 21
cohesVars <- names(df)[grepl("social_cohesion_group", names(df))]
df[,cohesVars] <- reshape::rescaler(df[,cohesVars],type="range")
summary(df[,cohesVars])
df$cohes_index <- rowMeans(df[,cohesVars], na.rm=T)
#psych::alpha(df[,cohesVars]) # 0.75
# sc1 - abstract
cohesVars1 <- cohesVars[1:5]
df$cohes_index1 <- rowMeans(df[,cohesVars1], na.rm=T)
#psych::alpha(df[,cohesVars1]) # 0.77
# sc2 - concrete
cohesVars2 <- cohesVars[6:10]
df$cohes_index2 <- rowMeans(df[,cohesVars2], na.rm=T)
#psych::alpha(df[,cohesVars2]) # 0.76
# empathy (chunk below)
# expand
expandVars <- cohesVars[1:8]
df$expand_index <- rowMeans(df[,expandVars], na.rm=T)
#psych::alpha(df[expandVars]) # 0.74
# Chunk 22
empVars <- c("social_cohesion_group2.misfortune_x", "social_cohesion_group2.misfortune_your")
perspVars <- "threat_group.x_responsible"
df[,empVars] <- reshape::rescaler(df[,empVars],type="range")
df[,perspVars] <- reshape::rescaler(df[,perspVars],type="range")
summary(df[,empVars])
df$emp_index <- rowMeans(df[,empVars], na.rm=T)
df$persp_index <- df[,perspVars]
df$empPersp_index <- rowMeans(df[,c(empVars, perspVars)])
#alpha
#psych::alpha(df[,c(empVars, perspVars)])
# Chunk 23
table(df$econ_benefit_group.benefit_econ)
beneVars <- names(df)[grepl("(econ|qip)", names(df))][-4]
df[,beneVars] <- reshape::rescaler(df[,beneVars],type="range")
summary(df[,beneVars])
# all
#table(df$econ_benefit_group.benefit_econ, df$econ_benefit_group.more_benefit, exclude=c()) # if agreed they benefit materially
#table(df$econ_benefit_group.benefit_econ, df$econ_benefit_group.more_benefit_disagree, exclude=c()) # if disagreed they benefit
df$bene_index <- rowMeans(df[,beneVars],na.rm=T)
# perceptions only
beneVarsPerc <- beneVars[1:3]
df$bene_index_perc <- rowMeans(df[,beneVarsPerc],na.rm=T)
# awareness/use only
beneVarsReal <- beneVars[4:7]
df$bene_index_real <- rowMeans(df[,beneVarsReal],na.rm=T)
# best question only
beneVar <- beneVars[1]
df$bene_index1 <- df[,beneVar]
# Chunk 24
outVars <- names(df)[grepl("(comf|outgroup)", names(df))]
df[,outVars] <- reshape::rescaler(df[,outVars],type="range")
summary(df[,outVars])
df$out_index <- rowMeans(df[,outVars],na.rm=T)
psych::alpha(df[,outVars]) # 0.89
# X specifically
xVars <- names(df)[grepl("(comf|trust_x)", names(df))]
summary(df[,xVars])
df$x_index <- rowMeans(df[,xVars],na.rm=T)
psych::alpha(df[,xVars]) # 0.89
# other groups specifically
otherVars <- setdiff(outVars,xVars)
summary(df[,otherVars])
df$other_index <- rowMeans(df[,otherVars],na.rm=T)
psych::alpha(df[,otherVars]) # 0.89
# Chunk 25
# more sharing resources, fewer disputes, & better resolved disputes (this big index does not make sense. sharing farmland opens up qs about disputes.)
shareVars <- names(df)[grepl("^share_[a-z]*$", names(df))]
numDisVars <- names(df)[grepl("(dispute$|tension$)", names(df))]
resolveVars <- names(df)[grepl("(resolve[^s]|persist)", names(df))]
# if NO disputes (1=no), then give max for dispute resolution.
df$farmland_disputes_resolved <- ifelse(df$share_farmland_dispute %in% 1 & is.na(df$farmland_disputes_resolved), max(df$farmland_disputes_resolved, na.rm=T),  df$farmland_disputes_resolved)
df$pasture_disputes_resolved <- ifelse(df$share_pasture_dispute %in% 1 & is.na(df$pasture_disputes_resolved), max(df$pasture_disputes_resolved, na.rm=T),  df$pasture_disputes_resolved)
df$market_disputes_resolved <- ifelse(df$share_market_dispute %in% 1 & is.na(df$market_disputes_resolved), max(df$market_disputes_resolved, na.rm=T),  df$market_disputes_resolved)
disVars <- c(shareVars, numDisVars, resolveVars)
df[,disVars] <- reshape::rescaler(df[,disVars],type="range")
#summary(df[,disVars])
df$dis_index <- rowMeans(df[,disVars], na.rm=T)
#psych::alpha(df[,disVars]) # won't give an alpha? Something wrong with this as an index, perfect correlations.  Shared should not be a part of it.
################################################
# Individual parts of dispute resolution.
################################################
# better resolved
df$resolve_index <- rowMeans(df[,resolveVars], na.rm=T)
#summary(df[,resolveVars])
#psych::alpha(df[,resolveVars]) #0.48
# fewer disputes
df$numDis_index <- rowMeans(df[,numDisVars], na.rm=T)
#summary(df[,numDisVars])
#psych::alpha(df[,numDisVars]) #0.78
# shared resources
df$share_index <- rowMeans(df[,shareVars], na.rm=T)
#psych::alpha(df[,shareVars]) #0.39
# Chunk 26
disActorVars <- names(df)[grepl("dispute_resolution_group", names(df))]
df[,disActorVars] <- reshape::rescaler(df[,disActorVars],type="range")
#summary(df[,disActorVars])
df$disActor_index <- rowMeans(df[,disActorVars], na.rm=T)
#psych::alpha(df[,disActorVars]) #0.82
# I don't want to code all of these.
## local gov
## rel leaders
## sec officials
## state gov
## trad leader
## women
## youth
# Chunk 27
save.image(file="d-additiveIndices.Rdata")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
load("d-additiveIndices.Rdata")
library(plyr)
library(dplyr)
library(estimatr)
library(psych)
# index functions
## icw
load(file="index_fun.rda")
# icwIndex function
# Chunk 2
# first make rand.df to mess with
rand.df <- df
# then make var to indicate control group for ICW
rand.df$control <- ifelse(rand.df$treatment == 1, 0, 1)
# want separate baseline & endline indices
rand.df1 <- rand.df[rand.df$survey %in% 0,]
rand.df2 <- rand.df[rand.df$survey %in% 1,]
# removing panel people/preselected from endline, since not randomly selected
rand.df2 <- rand.df2[!rand.df2$pre_selected %in% 'pre',]
# Chunk 3
# both tr and co
ic.fun1 <- function(vars, thedf)
{
x <- thedf[,vars]
x <- zoo::na.aggregate(x)
out_cw <- icwIndex(x)
print(cor(x))
print(out_cw$weights)
return(as.vector(out_cw$index))
}
# just co
ic.fun <- function(vars, thedf)
{
x <- thedf[,vars]
x <- zoo::na.aggregate(x)
out_cw <- icwIndex(xmat=x, sgroup=as.logical(thedf[,'control']))
print(cor(x))
print(out_cw$weights)
return(as.vector(out_cw$index))
}
# Chunk 4
# should loop but feeling braindead
# Baseline
rand.df1$trust_cw <- ic.fun(trustVars, rand.df1)
rand.df1$dist_cw <- ic.fun(distVars, rand.df1)
rand.df1$attitude_cw <- ic.fun(attitudeVars, rand.df1)
rand.df1$x_cw <- ic.fun(xVars, rand.df1)
rand.df1$out_cw <- ic.fun(outVars, rand.df1)
rand.df1$other_cw <- ic.fun(otherVars, rand.df1)
#rand.df1$aware_cw <- ic.fun(awareVars, rand.df1) # just one variable
rand.df1$clash_cw <- ic.fun(clashVars, rand.df1)
rand.df1$contactOnly_cw <- ic.fun(contactVars[c(1:4,7)], rand.df1)
rand.df1$contactOnly_cats_cw <- ic.fun(paste0(contactVars[c(1:4,7)], "_cats"), rand.df1)
rand.df1$contactOnly_raw_cw <- ic.fun(paste0(contactVars[c(1:4,7)], "_raw"), rand.df1)
rand.df1$bene_cw <- ic.fun(beneVarsPerc, rand.df1)
rand.df1$threat_cw <- ic.fun(threatVars, rand.df1)
rand.df1$in_cw <- ic.fun(inVars, rand.df1)
rand.df1$cohes_cw <- ic.fun(cohesVars, rand.df1)
rand.df1$cohes1_cw <- ic.fun(cohesVars1, rand.df1)
rand.df1$cohes2_cw <- ic.fun(cohesVars2, rand.df1)
rand.df1$dis_cw <- ic.fun(disVars, rand.df1)
rand.df1$share_cw <- ic.fun(shareVars, rand.df1)
rand.df1$numDis_cw <- ic.fun(numDisVars, rand.df1)
rand.df1$resolve_cw <- ic.fun(resolveVars, rand.df1)
rand.df1$barg_cw <- ic.fun(bargVars, rand.df1)
rand.df1$disActor_cw <- ic.fun(disActorVars, rand.df1)
rand.df1$vio_cw <- ic.fun(vioVars, rand.df1)
rand.df1$vioExp_cw <- ic.fun(vioExpVars, rand.df1)
rand.df1$persp_cw <- rand.df1$persp_index
rand.df1$emp_cw <- ic.fun(empVars, rand.df1)
rand.df1$expand_cw <- ic.fun(expandVars, rand.df1)
# Endline
rand.df2$trust_cw <- ic.fun(trustVars, rand.df2)
rand.df2$dist_cw <- ic.fun(distVars, rand.df2)
rand.df2$attitude_cw <- ic.fun(attitudeVars, rand.df2)
rand.df2$x_cw <- ic.fun(xVars, rand.df2)
rand.df2$out_cw <- ic.fun(outVars, rand.df2)
rand.df2$other_cw <- ic.fun(otherVars, rand.df2)
#rand.df2$aware_cw <- ic.fun(awareVars, rand.df2) # only one var
rand.df2$clash_cw <- ic.fun(clashVars, rand.df2)
rand.df2$contactOnly_cw <- ic.fun(contactVars[c(1:4,7)], rand.df2)
rand.df2$contactOnly_cats_cw <- ic.fun(paste0(contactVars[c(1:4,7)], "_cats"), rand.df2)
rand.df2$contactOnly_raw_cw <- ic.fun(paste0(contactVars[c(1:4,7)], "_raw"), rand.df2)
rand.df2$bene_cw <- ic.fun(beneVarsPerc, rand.df2)
rand.df2$threat_cw <- ic.fun(threatVars, rand.df2)
rand.df2$in_cw <- ic.fun(inVars, rand.df2)
rand.df2$cohes_cw <- ic.fun(cohesVars, rand.df2)
rand.df2$cohes1_cw <- ic.fun(cohesVars1, rand.df2)
rand.df2$cohes2_cw <- ic.fun(cohesVars2, rand.df2)
rand.df2$dis_cw <- ic.fun(disVars, rand.df2)
rand.df2$share_cw <- ic.fun(shareVars, rand.df2)
rand.df2$numDis_cw <- ic.fun(numDisVars, rand.df2)
rand.df2$resolve_cw <- ic.fun(resolveVars, rand.df2)
rand.df2$barg_cw <- ic.fun(bargVars, rand.df2)
rand.df2$disActor_cw <- ic.fun(disActorVars, rand.df2)
rand.df2$vio_cw <- ic.fun(vioVars, rand.df2)
rand.df2$vioExp_cw <- ic.fun(vioExpVars, rand.df2)
rand.df2$persp_cw <- rand.df2$persp_index
rand.df2$emp_cw <- ic.fun(empVars, rand.df2)
rand.df2$expand_cw <- ic.fun(expandVars, rand.df2)
# Now scale as 0-1 so that we can easily discuss them as % increase/decrease for MC report. # not necessary until aggregated.
#icVars <- names(rand.df1)[grepl("_cw", names(rand.df1))]
#rand.df1[,icVars] <- reshape::rescaler(rand.df1[,icVars],type="range")
#rand.df2[,icVars] <- reshape::rescaler(rand.df2[,icVars],type="range")
# rebind
rand.df <- rbind(rand.df1, rand.df2)
# Chunk 5
save(rand.df, file="rand_df.Rdata")
setwd("D:/Repos/ecpn_submission/data_and_code/survey_dat/b_creating_outcomes")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
load("d-additiveIndices.Rdata")
library(plyr)
library(dplyr)
library(estimatr)
library(psych)
# index functions
## icw
load(file="index_fun.rda")
# icwIndex function
# Chunk 2
# first make rand.df to mess with
rand.df <- df
# then make var to indicate control group for ICW
rand.df$control <- ifelse(rand.df$treatment == 1, 0, 1)
# want separate baseline & endline indices
rand.df1 <- rand.df[rand.df$survey %in% 0,]
rand.df2 <- rand.df[rand.df$survey %in% 1,]
# removing panel people/preselected from endline, since not randomly selected
rand.df2 <- rand.df2[!rand.df2$pre_selected %in% 'pre',]
# Chunk 3
# both tr and co
ic.fun1 <- function(vars, thedf)
{
x <- thedf[,vars]
x <- zoo::na.aggregate(x)
out_cw <- icwIndex(x)
print(cor(x))
print(out_cw$weights)
return(as.vector(out_cw$index))
}
# just co
ic.fun <- function(vars, thedf)
{
x <- thedf[,vars]
x <- zoo::na.aggregate(x)
out_cw <- icwIndex(xmat=x, sgroup=as.logical(thedf[,'control']))
print(cor(x))
print(out_cw$weights)
return(as.vector(out_cw$index))
}
# Chunk 4
# should loop but feeling braindead
# Baseline
rand.df1$trust_cw <- ic.fun(trustVars, rand.df1)
rand.df1$dist_cw <- ic.fun(distVars, rand.df1)
rand.df1$attitude_cw <- ic.fun(attitudeVars, rand.df1)
rand.df1$x_cw <- ic.fun(xVars, rand.df1)
rand.df1$out_cw <- ic.fun(outVars, rand.df1)
rand.df1$other_cw <- ic.fun(otherVars, rand.df1)
#rand.df1$aware_cw <- ic.fun(awareVars, rand.df1) # just one variable
rand.df1$clash_cw <- ic.fun(clashVars, rand.df1)
rand.df1$contactOnly_cw <- ic.fun(contactVars[c(1:4,7)], rand.df1)
rand.df1$contactOnly_cats_cw <- ic.fun(paste0(contactVars[c(1:4,7)], "_cats"), rand.df1)
rand.df1$contactOnly_raw_cw <- ic.fun(paste0(contactVars[c(1:4,7)], "_raw"), rand.df1)
rand.df1$bene_cw <- ic.fun(beneVarsPerc, rand.df1)
rand.df1$threat_cw <- ic.fun(threatVars, rand.df1)
rand.df1$in_cw <- ic.fun(inVars, rand.df1)
rand.df1$cohes_cw <- ic.fun(cohesVars, rand.df1)
rand.df1$cohes1_cw <- ic.fun(cohesVars1, rand.df1)
rand.df1$cohes2_cw <- ic.fun(cohesVars2, rand.df1)
rand.df1$dis_cw <- ic.fun(disVars, rand.df1)
rand.df1$share_cw <- ic.fun(shareVars, rand.df1)
rand.df1$numDis_cw <- ic.fun(numDisVars, rand.df1)
rand.df1$resolve_cw <- ic.fun(resolveVars, rand.df1)
rand.df1$barg_cw <- ic.fun(bargVars, rand.df1)
rand.df1$disActor_cw <- ic.fun(disActorVars, rand.df1)
rand.df1$vio_cw <- ic.fun(vioVars, rand.df1)
rand.df1$vioExp_cw <- ic.fun(vioExpVars, rand.df1)
rand.df1$persp_cw <- rand.df1$persp_index
rand.df1$emp_cw <- ic.fun(empVars, rand.df1)
rand.df1$expand_cw <- ic.fun(expandVars, rand.df1)
# Endline
rand.df2$trust_cw <- ic.fun(trustVars, rand.df2)
rand.df2$dist_cw <- ic.fun(distVars, rand.df2)
rand.df2$attitude_cw <- ic.fun(attitudeVars, rand.df2)
rand.df2$x_cw <- ic.fun(xVars, rand.df2)
rand.df2$out_cw <- ic.fun(outVars, rand.df2)
rand.df2$other_cw <- ic.fun(otherVars, rand.df2)
#rand.df2$aware_cw <- ic.fun(awareVars, rand.df2) # only one var
rand.df2$clash_cw <- ic.fun(clashVars, rand.df2)
rand.df2$contactOnly_cw <- ic.fun(contactVars[c(1:4,7)], rand.df2)
rand.df2$contactOnly_cats_cw <- ic.fun(paste0(contactVars[c(1:4,7)], "_cats"), rand.df2)
rand.df2$contactOnly_raw_cw <- ic.fun(paste0(contactVars[c(1:4,7)], "_raw"), rand.df2)
rand.df2$bene_cw <- ic.fun(beneVarsPerc, rand.df2)
rand.df2$threat_cw <- ic.fun(threatVars, rand.df2)
rand.df2$in_cw <- ic.fun(inVars, rand.df2)
rand.df2$cohes_cw <- ic.fun(cohesVars, rand.df2)
rand.df2$cohes1_cw <- ic.fun(cohesVars1, rand.df2)
rand.df2$cohes2_cw <- ic.fun(cohesVars2, rand.df2)
rand.df2$dis_cw <- ic.fun(disVars, rand.df2)
rand.df2$share_cw <- ic.fun(shareVars, rand.df2)
rand.df2$numDis_cw <- ic.fun(numDisVars, rand.df2)
rand.df2$resolve_cw <- ic.fun(resolveVars, rand.df2)
rand.df2$barg_cw <- ic.fun(bargVars, rand.df2)
rand.df2$disActor_cw <- ic.fun(disActorVars, rand.df2)
rand.df2$vio_cw <- ic.fun(vioVars, rand.df2)
rand.df2$vioExp_cw <- ic.fun(vioExpVars, rand.df2)
rand.df2$persp_cw <- rand.df2$persp_index
rand.df2$emp_cw <- ic.fun(empVars, rand.df2)
rand.df2$expand_cw <- ic.fun(expandVars, rand.df2)
# Now scale as 0-1 so that we can easily discuss them as % increase/decrease for MC report. # not necessary until aggregated.
#icVars <- names(rand.df1)[grepl("_cw", names(rand.df1))]
#rand.df1[,icVars] <- reshape::rescaler(rand.df1[,icVars],type="range")
#rand.df2[,icVars] <- reshape::rescaler(rand.df2[,icVars],type="range")
# rebind
rand.df <- rbind(rand.df1, rand.df2)
# Chunk 5
save(rand.df, file="rand_df.Rdata")
setwd("D:/Repos/ecpn_submission/data_and_code/survey_dat/c_creating_dataframes")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
load("../b_creating_outcomes/d-additiveIndices.Rdata")
load("../b_creating_outcomes/rand_df.Rdata")
library(dplyr)
library(estimatr)
# Chunk 2
# stuff from above that needs to be run because above is now eval=F
possCovars <- c('age', 'ethnic2', 'radio',
'gender', 'income_month',
'username', 'duration',
"state"
)
rand.df$age <- as.numeric(as.character(rand.df$age))
# fix/make numeric variables
rand.df$ethnic2 <- as.factor(rand.df$ethnic2)
rand.df <- cbind(rand.df,model.matrix(~ . + 0, data=rand.df['ethnic2'], contrasts.arg = lapply(rand.df['ethnic2'], contrasts, contrasts=FALSE))) #
rand.df$psu <- as.numeric(as.character(rand.df$psu)) #for aggregation we want psu as a number
rand.df$female <- ifelse(rand.df$gender %in% "female", 1, 0)
possCovars <- c(possCovars[!possCovars %in% c("ethnic2", "username", "gender", "state")], "female")
# aggregate vars
listVars <- ls(pattern="Vars") # there is a way to do this just from this list of values, but idk how offhand.
expVars <- names(rand.df)[grepl("^(...|....)_(exp[0-9])|^rand_", names(rand.df))]
pgpVars <- names(rand.df)[grepl("pgp", names(rand.df))]
ag.vars <- unique(c(names(rand.df)[grepl("index", names(rand.df))],
names(rand.df)[grepl("cw", names(rand.df))],
attitudeVars, beneVars, bargVars, clashVars,
cohesVars, contactVars, dispVars,
disVars, otherVars, vioVars, threatVars, vioExpVars,
expVars, pgpVars, perspVars,
'treatment', 'community', 'survey', "psu", #"tr_resid",
possCovars,
names(rand.df)[grepl("ethnic2[a-z]", names(rand.df))]))
ag1 <- aggregate(rand.df[rand.df$survey %in% 0,ag.vars], by=list(comm=rand.df[rand.df$survey %in% 0,ag.vars]$community), mean,na.rm=T)
ag2 <- aggregate(rand.df[rand.df$survey %in% 1,ag.vars], by=list(comm=rand.df[rand.df$survey %in% 1,ag.vars]$community), mean,na.rm=T)
# warnings because "community" is factor and cannot be aggregated by itself...
stopifnot(names(ag1)==names(ag2))
names(ag1) <- paste0(names(ag1),"_base")
names(ag2) <- paste0(names(ag2),"_end")
# Chunk 3
ag2[, c('treatment_end','psu_end', "comm_end")] <- NULL # remove things from ag2 that are also in ag1 so no useless duplicates
ag.df<-as.data.frame(cbind(ag1,ag2))
ag.df$state <- rand.df$state[match(ag.df$comm_base,rand.df$community)]
ag.df$clash_index_end[is.na(ag.df$clash_in)] # if there is an NA in clash_index (no one even knew about conflict), make it 0
stopifnot(mean(ag.df$clash_index_base)==mean(ag1$clash_index_base, na.rm=T))
stopifnot(mean(ag.df$clash_index_end, na.rm=T)==mean(ag2$clash_index_end, na.rm=T))
names(ag.df)[names(ag.df) %in% c("comm_base", "treatment_base", "psu_base")] <- c("comm", "treatment","psu" )
ag.df[,grepl("(survey|community)", names(ag.df))] <- NULL
rm(ag1); rm(ag2)
# Chunk 4
## re-scale before DiD outcome.  It puts both baseline and endline on 0-1, then asks about movement on that 0-1.  Otherwise, max score at baseline/endline would look like a big change when they are supposed to be the same thing.
icVars <- names(ag.df)[grepl("_cw", names(ag.df))]
ag.df[,icVars] <- reshape::rescaler(ag.df[,icVars],type="range")
ag.df[,icVars] <- reshape::rescaler(ag.df[,icVars],type="range")
# Chunk 5
# list exp
ag.df$list_exp_base <- ag.df$list_exp1b_base - ag.df$list_exp1a_base
ag.df$list_exp_end <- ag.df$list_exp1b_end - ag.df$list_exp1a_end
ag.df[,names(ag.df)[grepl("list_exp1(a|b)", names(ag.df))]] <- NULL
# end_exp: 1a goes to pastoralists, 1b goes to farmer's, 1c is generic.
ag.df$end_expTR_end <- ifelse(is.na(ag.df$end_exp1a_end), ag.df$end_exp1b_end, ag.df$end_exp1a_end)
ag.df$end_expTR_base <- ifelse(is.na(ag.df$end_exp1a_base), ag.df$end_exp1b_base, ag.df$end_exp1a_base)
ag.df$end_exp_end <- ag.df$end_expTR_end - ag.df$end_exp1c_end
ag.df$end_exp_base <- ag.df$end_expTR_base - ag.df$end_exp1c_base
#ag.df[,c("comm",names(ag.df)[grepl("end_exp", names(ag.df))])]
ag.df[,names(ag.df)[grepl("end_exp1(a|b)", names(ag.df))]] <- NULL
# Chunk 6
ag.df[,sub("_end$", "", names(ag.df)[grepl("_end$",names(ag.df))])] <- ag.df[,grepl("_end", names(ag.df))] - ag.df[,grepl("_base", names(ag.df))]
# test that worked right
ag.df$test <- ag.df$cohes_index_end - ag.df$cohes_index_base
stopifnot(ag.df$test==ag.df$cohes_index)
ag.df$test <- ag.df$list_exp_end - ag.df$list_exp_base
stopifnot(ag.df$test==ag.df$list_exp)
ag.df$test <- NULL
# pgp is only at endline, so remove pgp base vars
ag.df[,names(ag.df)[grepl("(pgp_.*_base|pgp_[[:alpha:]]*$)", names(ag.df))]] <- NULL
# Chunk 7
# aggregate to treatment/condition level, outcomes are (1) % who say yes in each condition at BASELINE and (2) the % who says yes in each condition at ENDLINE.
table(rand.df$rand_condition, exclude=c())
rand.df <- rand.df[!is.na(rand.df$rand_condition),]
new.df <- rand.df %>%
select(treatment,survey, community, rand_outcome, rand_condition, state, psu) %>%
dplyr::group_by(community, treatment, rand_condition, state, psu) %>%
dplyr::summarise(randOut_end=mean(rand_outcome[survey %in% 1], na.rm=T),
randOut_base=mean(rand_outcome[survey %in% 0]),
randOut=randOut_end-randOut_base) %>%
as.data.frame()
#summary(lm(randOut~treatment+factor(rand_condition)+state, new.df))
# looks right, now to make it a randomization test
#####
# But how to do this in a way that lets me easily test it with NPC?  Not possible now, diff datasets.  Maybe if we collapse this into a comm-level with columns for: (1) increase at 5%, (2) increase at 25%, (3) increase at 50%, (4) increase at 75%, and (5) average increase.  Can then merge/cbind with ag.df.  Will be functionally identical to above, but at ag.df level!
####
merge.df <- new.df %>% dplyr::group_by(community) %>%
summarise(r5=randOut[rand_condition %in% 5],
r25=randOut[rand_condition %in% 25],
r50=randOut[rand_condition %in% 50],
r75=randOut[rand_condition %in% 75],
r5_base=randOut_base[rand_condition %in% 5],
r25_base=randOut_base[rand_condition %in% 25],
r50_base=randOut_base[rand_condition %in% 50],
r75_base=randOut_base[rand_condition %in% 75],
r5_end=randOut_end[rand_condition %in% 5],
r25_end=randOut_end[rand_condition %in% 25],
r50_end=randOut_end[rand_condition %in% 50],
r75_end=randOut_end[rand_condition %in% 75]
) %>%
as.data.frame()
merge.df$rMean <- rowMeans(merge.df[c('r5','r25','r50','r75')])
merge.df$rMean_base <- rowMeans(merge.df[c('r5_base','r25_base','r50_base','r75_base')])
merge.df$rMean_end <- rowMeans(merge.df[c('r5_end','r25_end','r50_end','r75_end')])
ag.df <- merge(ag.df, merge.df, all=T, by.x="comm", by.y="community")
rm(new.df)
rm(merge.df)
# Chunk 8
ag.df$psu <- as.factor(as.character(ag.df$psu))
# need to reverse some cols so that HIGH is GOOD for all variables.  For these variables right now, HIGH is BAD.  This makes HIGH GOOD.
revCols <- c("clash_index", "clash_cw", "clash_cw_base", "clash_cw_end",
"threat_index", "threat_cw", "threat_cw_base", "threat_cw_end",
"in_index", "in_cw", "in_cw_base", "in_cw_end",
"list_exp", "list_exp_base", "list_exp_end")
ag.df[,revCols] <- ag.df[,revCols]*-1
# Chunk 9
allIndices <- c("x_cw", "cohes_cw", "pgp_amount_end",
"pgp_donate_end", "contactOnly_cw", "in_cw",
"resolve_cw", "list_exp", "rMean", "end_exp")
# chris: if we are comfortable, could replace rand_lm with rMean, the diff outcome of the rando_exp.  Or add it.
matStand <- function(x, sgroup = rep(TRUE, nrow(x))){
for(j in 1:ncol(x)){
x[,j] <- (x[,j] - mean(x[sgroup,j]))/sd(x[sgroup,j])
}
return(x)
}
icwIndex <- function(	xmat,
wgts=rep(1, nrow(xmat)),
revcols = NULL,
sgroup = rep(TRUE, nrow(xmat))){
X <- matStand(xmat, sgroup)
if(length(revcols)>0){
X[,revcols] <-  -1*X[,revcols]
}
i.vec <- as.matrix(rep(1,ncol(xmat)))
Sx <- cov.wt(X, wt=wgts)[[1]]
weights <- solve(t(i.vec)%*%solve(Sx)%*%i.vec)%*%t(i.vec)%*%solve(Sx)
index <- t(solve(t(i.vec)%*%solve(Sx)%*%i.vec)%*%t(i.vec)%*%solve(Sx)%*%t(X))
return(list(weights = weights, index = index))
}
ag.df$control <- ifelse(ag.df$treatment == 1, 0, 1)
ic2.fun <- function(vars)
{
x <- ag.df[,vars]
x <- zoo::na.aggregate(x)
out_cw <- icwIndex(xmat=x, sgroup=as.logical(ag.df$control))
print(cor(x))
print(out_cw$weights)
return(as.vector(out_cw$index))
}
baseIndices <- c(paste0(allIndices[grepl("cw", allIndices)], "_base"), allIndices[!grepl("cw", allIndices)])
endIndices <- sub("_base", "_end", baseIndices)
ag.df$all_cw_base <- reshape::rescaler(ic2.fun(baseIndices), type="sd")
ag.df$all_cw_end <- reshape::rescaler(ic2.fun(endIndices), type="sd")
ag.df$all_cw <- ag.df$all_cw_end-ag.df$all_cw_base
# no pgg
ag.df$all2_cw <- ic2.fun(allIndices[-c(3,4)])
# Chunk 10
rankCols <- c(names(ag.df)[grepl("_cw", names(ag.df))],
"pgp_amount_end", "pgp_donate_end",
'list_exp', 'rMean', 'end_exp') # still more outcomes than I care about, but that's okay
ag.df[,paste0(rankCols, "_rank")] <- sapply(ag.df[,rankCols], rank)
# Chunk 11
save(rand.df, file="rand_df.Rdata")
rm(list=ls(pattern="(rand|base|end|^df|^i$|^lm|lm$|new_fmla|test)"))
save.image(file="f-aggregateComms_ap.Rdata")
