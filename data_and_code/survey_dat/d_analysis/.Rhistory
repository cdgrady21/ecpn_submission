ate_hbwt2 <- fixed_effect <- lm_robust(Y~Z+bF,data=dat2)
#ate_hbwt3 <- lm_robust(Y~Z,fixed_effects=~bF,data=dat2) # identical to above but does not print block coefs
# ate_hbwt5 <- lm_robust(I(Y-ave(Y,b))~I(Z-ave(Z,b)),data=dat2) #demeaning
hbwtates<-c(simple_precis=ate_hbwt1,
precis_wts=ate_hbwt4$coefficients[["Z"]],
fixed_effects=ate_hbwt2$coefficients[["Z"]])
hbwtates
# chris: remove if not using.
## ate_hbwt1se <- sqrt(sum(datB$hbwt01^2 * datB$estvartaub))
##
## hbwtses <- c(simple_precis=ate_hbwt1se,
## 	     lmfe1=ate_hbwt2$std.error[["Z"]],
## 	     lmfe2=ate_hbwt3$std.error[["Z"]],
## 	     wts=ate_hbwt4$std.error[["Z"]],
## 	     demean=ate_hbwt5$std.error[[2]])
## hbwtses
##
## nbwtses
# Define estimators that can be repeated in the simulation below
estnowtHC2 <- declare_estimator(Y~Z, estimand=theestimand, model=lm_robust, label="Naive: Ignores Blocks, Design SE")
estnbwt1   <- declare_estimator(Y~Z, estimand=theestimand, model=difference_in_means, blocks = b,label="Block1: Diff Means Block Size Weights, Design SE")
nbwt_est_fun <- function(data){
data$newnbwt <- with(data,( Z/pib ) + ( (1-Z)/(1-pib) ) )
obj <-lm_robust(Y~Z,data=data,weights = newnbwt)
res <- tidy(obj) %>% filter(term=="Z")
return(res)
}
hbwt_est_fun <- function(data){
data$newnbwt <- with(data,( Z/pib ) + ( (1-Z)/(1-pib) ) )
data$newhbwt <-  with(data, newnbwt * ( pib * (1 - pib) ) )
obj <-lm_robust(Y~Z,data=data,weights = newhbwt)
res <- tidy(obj) %>% filter(term=="Z")
return(res)
}
estnbwt4   <- declare_estimator(handler = tidy_estimator(nbwt_est_fun), estimand=theestimand, label="Block2: Least Squares with Block Size Weights, Design SE")
esthbwt1   <- declare_estimator(Y~Z+bF, estimand=theestimand, model=lm_robust,label="Precis1: Precision Weights via Fixed Effects, Design SE")
#esthbwt2   <- declare_estimator(Y~Z, estimand=theestimand, model=lm_robust,fixed_effects=~bF,label=": Precision Weights via Demeaning, Design SE")
esthbwt3   <- declare_estimator(handler = tidy_estimator(hbwt_est_fun), estimand=theestimand,label="Precis2: Least Squares with Precision Weights, Design SE")
theestimators <- ls(patt="^est.*?wt")
theestimators
checkest <- sapply(theestimators,function(x){ get(x)(as.data.frame(dat2))[c("estimate","std.error")]})
checkest
thedesignPlusEstimators <- thedesign2 +
estnowtHC2 + estnbwt1 + estnbwt4 +
esthbwt1 + esthbwt3
#chris: remove if not using.
## Verifying that this works with a fixed population
## datv1 <- draw_data(thedesign)
##datv2 <- draw_data(thedesign)
##table(datv1$Z,datv2$Z)
plan(sequential)
sims <- 1000
set.seed(12345)
thediagnosis <- diagnose_design(thedesignPlusEstimators, sims = sims, bootstrap_sims = 0)
## See https://haozhu233.github.io/kableExtra/awesome_table_in_html.html
kable(reshape_diagnosis(thediagnosis)[c(3,1,2,4,5),diagcols] ) # %>% kable_styling() %>% scroll_box(width = "100%", height = "600px")
25*10
250*12
21*81
217/14371
.01^30
10000*30
(2^30)/100
(1+2^29)/100
((1+2^29)/100) - (10000*30)
(((1+2^29)/100)*2) - (10000*30)
50*.25
.03*1806
2000000000*.01
10/1600
10/850
install.packages("rmarkdown")
install.packages("qdap")
text <- "Text mining usually involves the process of structuring the input text. The overarching goal is, essentially, to turn text into data for analysis, via application of natural language processing (NLP) and analytical methods."
frequent_terms <- freq_terms(text, 3)
library(qdap)
frequent_terms <- freq_terms(text, 3)
frequent_terms <- qdap::freq_terms(text, 3)
1+9+3+8
21/4
200*80
20*360
28*360
30000/160
500*160
300*160
200*30
300*30
300*20
6000*12
30*18*28
30*18*28*3
160/3
300*55
300*160
330*6
1980/20
330/20
# 20 enumerators,
test <- 1:6
?sample
# 20 enumerators,
test <- sample(1:6, size=20, replace=T)
test
?rep
x <- rep(sample(1:6, size=20, replace=T),20)
x
once <- mosaic::do(20)*(sample(1:6, size=20, replace=T))
once
# 20 enumerators,
test.fun <- function()
{
once <- mosaic::do(20)*(sample(1:6, size=20, replace=T))
}
dists <- mosaic::do(1000)*test.fun()
summary(dists$V1)
dists[1:5,1:5]
dim(dists)
dists <- mosaic::do(1000)*(sample(1:6, size=20, replace=T))
dim(dists)
sample(1:6, size=100, replace=T)
# 20 enumerators = 100 svys each, sorted into 6 groups
dists <- mosaic::do(1000)*(sample(1:6, size=100, replace=T))
dim(dists)
summary(dists[,1;10])
summary(dists[,1:10])
summary(dists[1:20,1:10])
335*6
2000/20
100/6
mode(dists[1:20,1:10])
Modes <- function(x) {
ux <- unique(x)
tab <- tabulate(match(x, ux))
ux[tab == max(tab)]
}
Modes(dists[1:20,1:10])
Modes(dists[1,1:10])
Modes(dists[1:20,1])
Modes(dists[1:20,2])
Modes(dists[1:20,3])
8^6
(8^6)*4
2^9
1316/4
(1316/4)/7
20*700
2020-63
1989+16
13927-6300
10000*200
90/7
1200*300000000
n=3+4+3+3+5+14+31+44+43+39+30+27+24+18+15+11+9+8+5+4+1
n
341/21
80-(11.96*3)
11.96*3
36+59
63*.77
400000*1.03
400000*1.33
10000*750
10000/(137000+120000)
20000*1.1
20000*.1
2000*.65
100000/725
100000/750
15/1000
100*(2.89)^25
100*(2.89^25)
100*2.89
100*1.0289
100*(1.0289^25)
100*(1.0289^24)
.09*.09
1-(.09*.09)
133/176
152/215
1000/360
setwd("C:/Users/cdgra/Google Drive/Africa/Nigeria - Farmer-Pastoralist/ecpn_work/analysis/academicPaper/survey/b_creating_outcomes")
library(estimatr)
library(dplyr)
rm(list=ls())
load("../a_cleaning/c_dataCombine.Rdata")
summary(df$income_month)
summary(df$income_year)
median(df$income_year)
1000/median(df$income_year)
1000/(median(df$income_year)/365)
1000/(median(base$income_year)/365)
1000/(median(end$income_year)/365)
summary(df$income_year)
summary(base$income_year)
summary(end)
summary(df$income_year)
summary(base$income_year)
summary(end$income_year)
setwd("C:/Users/cdgra/Google Drive/Africa/Nigeria - Farmer-Pastoralist/ecpn_work/analysis/academicPaper/survey/d_analysis")
rm(list=ls())
load("../c_creating_dataframes/f-aggregateComms_ap.Rdata")
load("../c_creating_dataframes/rand_df.Rdata")
summary(ag.df$income_month)
summary(ag.df$income_month_base)
summary(ag.df$income_month_end)
27024-25515
lm(income_month_base~tr)
lm(income_month_base~tr, data=df)
lm(income_month_base~treatment, data=df)
lm(income_month_base~treatment, data=ag.df)
lm_robust(income_month_base~treatment, data=ag.df)
summary(lm(income_month_base~treatment, data=ag.df))
lm(income_month_end~treatment*income_month_base, data=ag.df)
summary(lm(income_month_end~treatment*income_month_base, data=ag.df))
summary(lm(income_month~treatment, data=ag.df))
library(mosaic)
mosaic::mean(ag.df$income_month_base~ag.df$treatment)
mosaic::mean(ag.df$income_month_end~ag.df$treatment)
8*8*365
8*8*(365*(5/7))
setwd("C:/Users/cdgra/Google Drive/Africa/Nigeria - Farmer-Pastoralist/ecpn_work/analysis/academicPaper/survey/d_analysis")
rm(list=ls())
load("../c_creating_dataframes/f-aggregateComms_ap.Rdata")
load("../c_creating_dataframes/rand_df.Rdata")
table(ag.df$state, ag.df$treatment)
4/6
8/12
4/6
6/3
3/6
4/6
6/9
3000/7500
8*6
1680+48
240000/1730
240000/1850
540*130
load("C:/Users/cdgra/Dropbox/CG-NC projects/academic_projects_joint/MuslimBan/data/A-arewa_data_recode.Rda")
load("C:/Users/cdgra/Dropbox/CG-NC projects/academic_projects_joint/MuslimBan/data/A-arewa_data_recode.Rda")
names(base)
setwd("C:/Users/chris/Repos/ecpn_submission/data_and_code/survey_dat/d_analysis")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
set.seed(76465)
rm(list=ls())
load("../c_creating_dataframes/f-aggregateComms_ap.Rdata")
load("../c_creating_dataframes/rand_df.Rdata")
#load("f-aggregateData_together.Rdata")
#load("rand_df_together.Rdata")
library(NPC)
library(dplyr)
library(mosaic)
library(estimatr)
library(robustbase)
library(quantreg)
library(sandwich)
library(clubSandwich)
library(lmtest)
library(coin)
#author: "cdgrady21"
#date: '`r format(Sys.Date(), "%B %d, %Y")`'
#True p-value function.  Don't need covariate adjustment to absorb error.  True p's Especially necessary with community level analysis, because we have a small number of clusters.  Treatment assigned at PSU level.
# Differencing
true.fun1 <- function(var, tr, nsims=3000, dat=ag.df)
{
if(grepl("resid", var)){
thelm <- lm(dat[,var]~dat[,tr], data=dat)
thecoef <-coef(thelm)[2]
rand.coef = rep(NA,nsims)
for(i in 1:nsims){
rand.nas <- sample(unique(dat$psu[dat$state %in% "nas"]), size=6)
rand.ben <- sample(unique(dat$psu[dat$state %in% "ben"]), size=4)
rand <- c(as.character(rand.nas), as.character(rand.ben))
rand.samp <- dat
rand.samp$treatment <- ifelse(rand.samp$psu %in% rand, 1, 0)
tr.lm <- lm(tr_fmla,rand.samp)
lm.tr_resid<-resid(tr.lm)
rand.samp[names(lm.tr_resid),"tr_resid"]<-lm.tr_resid
lm.null <- lm(rand.samp[,var]~rand.samp[,tr], data=rand.samp)
rand.coef[i] <- summary(lm.null)$coefficients[2,1]
}
}
else if(tr=="treatment"){
thelm <- lm(dat[,var]~dat[,tr]+state, data=dat)
thecoef <-coef(thelm)[2]
rand.coef = rep(NA,nsims)
for(i in 1:nsims){
rand.nas <- sample(unique(dat$psu[dat$state %in% "nas"]), size=6)
rand.ben <- sample(unique(dat$psu[dat$state %in% "ben"]), size=4)
rand <- c(as.character(rand.nas), as.character(rand.ben))
rand.samp <- dat
rand.samp[,tr] <- ifelse(rand.samp$psu %in% rand, 1, 0)
lm.null <- lm(rand.samp[,var]~rand.samp[,tr]+state, data=rand.samp)
rand.coef[i] <- summary(lm.null)$coefficients[2,1]
}
}
else{
thelm <- lm(dat[,var]~dat[,tr]+state, data=dat)
thecoef <-coef(thelm)[2]
rand.coef = rep(NA,nsims)
for(i in 1:nsims){
rand.samp <- dat %>% dplyr::group_by(state) %>% # for indices predicting indices, just shuffle within state.
mutate(newtr = shuffle(.data[[tr]])) %>%
as.data.frame(.)
lm.null <- lm(rand.samp[,var]~rand.samp[,'newtr']+state, data=rand.samp)
rand.coef[i] <- summary(lm.null)$coefficients[2,1]
}
}
thep <- mean(rand.coef>thecoef)
thedf <- data.frame(coef=thecoef,truep=thep)
rownames(thedf) <- paste0(var, "~",tr)
return(thedf)
}
#true.fun(var='x_index', tr='treatment')
#true.fun(var='x_cw', tr='treatment')
#true.fun(var='cohes_cw', tr='bene_cw')
#true.fun(var='x_cw_resid', tr='tr_resid') # doing this with resids #1 doesn't make sense to me, #2 doesn't change results, and #3 takes a long time.
## would make sense if there was a confounder, but this is a randomized experiment so should not have confounders. Could maybe use error reduction.
######## Controlling For
true.fun <- function(var, tr, nsims=3000, dat=ag.df)
{
if(grepl("resid", var)){
thelm <- lm(dat[,var]~dat[,tr], data=dat)
thecoef <-coef(thelm)[2]
rand.coef = rep(NA,nsims)
for(i in 1:nsims){
rand.nas <- sample(unique(dat$psu[dat$state %in% "nas"]), size=6)
rand.ben <- sample(unique(dat$psu[dat$state %in% "ben"]), size=4)
rand <- c(as.character(rand.nas), as.character(rand.ben))
rand.samp <- dat
rand.samp$treatment <- ifelse(rand.samp$psu %in% rand, 1, 0)
tr.lm <- lm(tr_fmla,rand.samp)
lm.tr_resid<-resid(tr.lm)
rand.samp[names(lm.tr_resid),"tr_resid"]<-lm.tr_resid
lm.null <- lm(rand.samp[,var]~rand.samp[,tr], data=rand.samp)
rand.coef[i] <- summary(lm.null)$coefficients[2,1]
}
}
else if(tr=="treatment" & (grepl("end", var) | grepl("y1", var))){
thelm <- lm(dat[,var]~dat[,tr]+state, data=dat)
thecoef <-coef(thelm)[2]
rand.coef = rep(NA,nsims)
for(i in 1:nsims){
rand.nas <- sample(unique(dat$psu[dat$state %in% "nas"]), size=6)
rand.ben <- sample(unique(dat$psu[dat$state %in% "ben"]), size=4)
rand <- c(as.character(rand.nas), as.character(rand.ben))
rand.samp <- dat
rand.samp[,tr] <- ifelse(rand.samp$psu %in% rand, 1, 0)
lm.null <- lm(rand.samp[,var]~rand.samp[,tr]+state, data=rand.samp)
rand.coef[i] <- summary(lm.null)$coefficients[2,1]
}
}
else if(tr=="treatment" & !(grepl("end", var) | grepl("y1", var))){
thelm <- lm(dat[,paste0(var,"_end")]~dat[,tr]+dat[,paste0(var,"_base")]+state, data=dat)
thecoef <-coef(thelm)[2]
rand.coef = rep(NA,nsims)
for(i in 1:nsims){
rand.nas <- sample(unique(dat$psu[dat$state %in% "nas"]), size=6)
rand.ben <- sample(unique(dat$psu[dat$state %in% "ben"]), size=4)
rand <- c(as.character(rand.nas), as.character(rand.ben))
rand.samp <- dat
rand.samp[,tr] <- ifelse(rand.samp$psu %in% rand, 1, 0)
lm.null <- lm(rand.samp[,paste0(var,"_end")]~rand.samp[,tr]+dat[,paste0(var,"_base")]+state, data=rand.samp)
rand.coef[i] <- summary(lm.null)$coefficients[2,1]
}
}
else if(grepl("end", var) | grepl("y1", var)){
thelm <- lm(dat[,var]~dat[,tr]+state, data=dat)
thecoef <-coef(thelm)[2]
rand.coef = rep(NA,nsims)
for(i in 1:nsims){
rand.samp <- dat %>% dplyr::group_by(state) %>% # for indices predicting indices, just shuffle within state.
mutate(newtr = shuffle(.data[[tr]])) %>%
as.data.frame(.)
lm.null <- lm(rand.samp[,var]~rand.samp[,'newtr']+state, data=rand.samp)
rand.coef[i] <- summary(lm.null)$coefficients[2,1]
}
}
else if(!grepl("end", var) | grepl("y1", var)){
thelm <- lm(dat[,paste0(var,"_end")]~dat[,tr]+dat[,paste0(var,"_base")]+state, data=dat)
thecoef <-coef(thelm)[2]
rand.coef = rep(NA,nsims)
for(i in 1:nsims){
rand.samp <- dat %>% dplyr::group_by(state) %>% # for indices predicting indices, just shuffle within state.
mutate(newtr = shuffle(.data[[tr]])) %>%
as.data.frame(.)
lm.null <- lm(rand.samp[,paste0(var,"_end")]~rand.samp[,'newtr']+dat[,paste0(var,"_base")]+state, data=rand.samp)
rand.coef[i] <- summary(lm.null)$coefficients[2,1]
}
}
thep <- mean(rand.coef>thecoef)
thedf <- data.frame(coef=thecoef,truep=thep)
rownames(thedf) <- paste0(var, "~",tr)
return(thedf)
}
#true.fun(var='x_index', tr='treatment')
#true.fun(var='x_cw', tr='treatment')
#true.fun(var='cohes_cw', tr='bene_cw')
#true.fun(var='x_cw_resid', tr='tr_resid') # doing this with resids #1 doesn't make sense, #2 doesn't change results, and #3 takes a long time.
## would make sense if there was a confounder, but this is a randomized experiment so should not have confounders.
#true.fun(var="pgp_amount_end", tr="treatment")
#true.fun('pgp_donate_end', 'bene_cw')
#true.fun('rMean', 'treatment')
#true.fun1('rMean', 'treatment')
# Which function to use?
strat.fun <- function(var){
thesd <- sd(ag.df[[var]])*.2
thediff <- abs(mosaic::mean(ag.df[[var]]~ag.df$treatment)[1]-mosaic::mean(ag.df[[var]]~ag.df$treatment)[2])
thebal <- thediff-thesd
if(thebal<0){
return("Controlling-for: true.fun")
}
if(thebal>=0){
return("Difference: true.fun1")
}
else(return("Fail"))
}
#strat.fun("x_cw_base")
# Chunk 3
farmers <- ag.df[grepl(".farmers", ag.df$comm),]
pastors <- ag.df[grepl(".pastor", ag.df$comm),]
# Chunk 4
nas <- ag.df[ag.df$state %in% "nas",]
ben <- ag.df[ag.df$state %in% "ben",]
# select
strat.fun("allTrust_cw_base")
trust_cw_cont_main
# true pvals
## main
(trust_cw_cont_main <- true.fun('allTrust_cw', 'treatment'))
trust_ind_cont_main <- true.fun('allTrust_index', 'treatment')
## robust
(trust_cw_diff_main <- true.fun1('allTrust_cw', 'treatment'))
trust_ind_diff_main <- true.fun1('allTrust_index', 'treatment')
trust_ind_cont_main
trust_cw_diff_main
trust_ind_diff_main
trust_cw_cont_main
trust_cw_diff_main
trust_ind_cont_main
trust_ind_diff_main
analysis.fun <- function(var)
{
var_cw_cont <- true.fun(var, 'treatment')
return(var_cw_cont)
}
analysis.fun <- function(var)
{
var_cw_cont <- true.fun(paste0(var, "_cw"), 'treatment')
return(var_cw_cont)
}
analysis.fun('allTrust')
# true pvals
## cont
(trust_cw_cont <- true.fun('allTrust_cw', 'treatment'))
# true pvals
## cont
(trust_cw_cont <- true.fun('allTrust_cw', 'treatment'))
analysis.fun('allTrust')
analysis.fun <- function(var)
{
var_cw_cont <- true.fun(paste0(var, "_cw"), 'treatment')
var_ind_cont <- true.fun(paste0(var, "_ind"), 'treatment')
var_cw_diff <- true.fun1(paste0(var, "_cw"), 'treatment')
var_ind_diff <- true.fun1(paste0(var, "_ind"), 'treatment')
var_tab <- rbind(var_cw_cont, var_ind_cont, var_cw_diff, var_ind_diff)
return(var_tab)
}
trust_tab <- analysis.fun('allTrust')
var='allTrust'
var_cw_cont <- true.fun(paste0(var, "_cw"), 'treatment')
var_ind_cont <- true.fun(paste0(var, "_ind"), 'treatment')
analysis.fun <- function(var)
{
var_cw_cont <- true.fun(paste0(var, "_cw"), 'treatment')
var_ind_cont <- true.fun(paste0(var, "_index"), 'treatment')
var_cw_diff <- true.fun1(paste0(var, "_cw"), 'treatment')
var_ind_diff <- true.fun1(paste0(var, "_index"), 'treatment')
var_tab <- rbind(var_cw_cont, var_ind_cont, var_cw_diff, var_ind_diff)
return(var_tab)
}
trust_tab <- analysis.fun('allTrust')
trust_tab
var_cw_diff
var_cw_diff <- true.fun1(paste0(var, "_cw"), 'treatment')
var_cw_diff
names(var_tab)
var_tab <- rbind(var_cw_cont, var_ind_cont, var_cw_diff, var_ind_diff)
var_cw_cont <- true.fun(paste0(var, "_cw"), 'treatment')
var_ind_cont <- true.fun(paste0(var, "_index"), 'treatment')
var_cw_diff <- true.fun1(paste0(var, "_cw"), 'treatment')
var_ind_diff <- true.fun1(paste0(var, "_index"), 'treatment')
var_tab <- rbind(var_cw_cont, var_ind_cont, var_cw_diff, var_ind_diff)
names(var_tab)
var_tab <- cbind (var_tab, c("cw_cont", "ind_cont", "cw_diff", "ind_diff"))
var_tab
names(var_tab)[3]
names(var_tab)[3] <- "version"
var_tab
strat.fun(var)
strat.fun(paste0(var, "_cw_base"))
strat.fun(paste0(var, "_index_base"))
strat.fun(paste0(var, "_ind_base"))
strat.fun(paste0(var, "_index_base"))
3*12
36*40
1440*20
1000*36
3*30
90*100
