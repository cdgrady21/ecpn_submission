# Chunk 6
load("list_of_rank_bin_raw.Rda")
stateList <- vector(mode="list", length=length(outcome_list))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
set.seed(962022)
rm(list=ls())
load("../c_creating_dataframes/f-aggregateComms_ap.Rdata")
load("../c_creating_dataframes/rand_df.Rdata")
#True p-value function.  Don't need covariate adjustment to absorb error.  True p's Especially necessary with community level analysis, because we have a small number of clusters.  Treatment assigned at PSU level.
load("true_fun.rda")
#library(NPC)
library(dplyr)
library(mosaic)
library(estimatr)
library(robustbase)
library(quantreg)
library(sandwich)
library(clubSandwich)
library(lmtest)
library(coin)
# Subsets
## Look at farmers and pastoralists separately.
farmers <- ag.df[grepl(".farmers", ag.df$comm),]
pastors <- ag.df[grepl(".pastor", ag.df$comm),]
## Look at states separately.
nas <- ag.df[ag.df$state %in% "nas",]
ben <- ag.df[ag.df$state %in% "ben",]
# Chunk 2
analysis.fun <- function(var)
{
if(paste0(var, "_cw_end") %in% names(ag.df))
{
var_cw_cont <- true.fun(paste0(var, "_cw"), 'treatment')
var_ind_cont <- true.fun(paste0(var, "_index"), 'treatment')
var_cw_diff <- true.fun1(paste0(var, "_cw"), 'treatment')
var_ind_diff <- true.fun1(paste0(var, "_index"), 'treatment')
which1 <- strat.fun(paste0(var, "_cw_base"))
thebase <- ifelse(grepl("Contr", which1), "cw_cont", "cw_diff")
}
else if(grepl("pgp", var))
{
var_cw_cont <- true.fun(var, 'treatment')
var_ind_cont <- NA
var_cw_diff <- NA
var_ind_diff <- NA
which1 <- NA
thebase <- NA
}
else
{
var_cw_cont <- true.fun(var, 'treatment')
var_ind_cont <- NA
var_cw_diff <- true.fun1(var, 'treatment')
var_ind_diff <- NA
which1 <- strat.fun(var)
thebase <- ifelse(grepl("Contr", which1), "cw_cont", "cw_diff")
}
var_tab <- rbind(var_cw_cont, var_ind_cont, var_cw_diff, var_ind_diff)
var_tab <- cbind (var_tab, c("cw_cont", "ind_cont", "cw_diff", "ind_diff"))
var_tab[4] <- thebase
colnames(var_tab)[3:4] <- c("version", "base")
var_tab[4] <- ifelse(var_tab[[4]] == var_tab[[3]], 1, 0)
return(var_tab)
}
#(trust_tab <- analysis.fun(var='attitude'))
#(in_tab <- analysis.fun('in'))
#con_tab <- analysis.fun('contactOnly')
#r_tab <- analysis.fun(var='rMean')
#pgp_tab <- analysis.fun(var='pgp_amount_end')
# Chunk 3
# loop over all outcomes
outcome_list <- c("attitude", "in", 'contactOnly',
'rMean', "end_exp",
"pgp_donate_end", "pgp_amount_end")
newList <- vector(mode="list", length=length(outcome_list))
# Chunk 5
load("list_of_coefs_and_ps.Rda")
# Chunk 7
load("list_of_rank_bin_raw.Rda")
stateList <- vector(mode="list", length=length(outcome_list))
analysis.fun(outcome_list[1]
)
newList
setwd("C:/Users/chris/Repos/ecpn_submission/appendix")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(RItools)
library(dplyr)
load("../data_and_code/survey_dat/c_creating_dataframes/f-aggregateComms_ap.Rdata")
load("../data_and_code/obs_dat/a_clean/a_obsDat_clean.rda")
outcome_list <- c("attitude_cw_base", "in_cw_base", 'contactOnly_cw_base',
'rand_lm_base', "rand_outcome_base", "end_exp_base")
demos_list <- c("age_base", "end_expTR_base", "rand_condition_base")
bal_fmla <- formula(treatment ~ attitude_cw_base + in_cw_base + contactOnly_cw_base + rand_lm_base + rand_outcome_base + end_exp_base)
bal_fmla
i=1
lm_robust(ag.df[,outcome_list[i]]~ag.df[,"treatment"]*state,
clusters = psu, fixed_effects = state, data=ag.df)
lm_robust(ag.df[,outcome_list[i]]~ag.df[,"treatment"]*state,
clusters = psu, data=ag.df)
lm_robust(ag.df[,outcome_list[i]]~ag.df[,"treatment"]*state,
clusters = psu, data=ag.df)
thelm <- lm_robust(ag.df[,outcome_list[i]]~ag.df[,"treatment"]*state,
clusters = psu, data=ag.df)
thelm
coef(thelm)
tidy(thelm)
newList[[i]] <- tidy(thelm)[c(2,4), c(2,5)]
stateList <- vector(mode="list", length=length(outcome_list))
thelm <- lm_robust(ag.df[,outcome_list[i]]~ag.df[,"treatment"]*state,
clusters = psu, data=ag.df)
stateList[[i]] <- tidy(thelm)[c(2,4), c(2,5)]
stateList
tidy(thelm)
stateList[[i]] <- tidy(thelm)[c(2,4), c(1,2,5)]
stateList
outcome_list[i]
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
set.seed(962022)
rm(list=ls())
load("../c_creating_dataframes/f-aggregateComms_ap.Rdata")
setwd("C:/Users/chris/Repos/ecpn_submission/data_and_code/survey_dat/d_analysis")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
set.seed(962022)
rm(list=ls())
load("../c_creating_dataframes/f-aggregateComms_ap.Rdata")
load("../c_creating_dataframes/rand_df.Rdata")
#True p-value function.  Don't need covariate adjustment to absorb error.  True p's Especially necessary with community level analysis, because we have a small number of clusters.  Treatment assigned at PSU level.
load("true_fun.rda")
#library(NPC)
library(dplyr)
library(mosaic)
library(estimatr)
library(robustbase)
library(quantreg)
library(sandwich)
library(clubSandwich)
library(lmtest)
library(coin)
# Subsets
## Look at farmers and pastoralists separately.
farmers <- ag.df[grepl(".farmers", ag.df$comm),]
pastors <- ag.df[grepl(".pastor", ag.df$comm),]
## Look at states separately.
nas <- ag.df[ag.df$state %in% "nas",]
ben <- ag.df[ag.df$state %in% "ben",]
# Chunk 2
analysis.fun <- function(var)
{
if(paste0(var, "_cw_end") %in% names(ag.df))
{
var_cw_cont <- true.fun(paste0(var, "_cw"), 'treatment')
var_ind_cont <- true.fun(paste0(var, "_index"), 'treatment')
var_cw_diff <- true.fun1(paste0(var, "_cw"), 'treatment')
var_ind_diff <- true.fun1(paste0(var, "_index"), 'treatment')
which1 <- strat.fun(paste0(var, "_cw_base"))
thebase <- ifelse(grepl("Contr", which1), "cw_cont", "cw_diff")
}
else if(grepl("pgp", var))
{
var_cw_cont <- true.fun(var, 'treatment')
var_ind_cont <- NA
var_cw_diff <- NA
var_ind_diff <- NA
which1 <- NA
thebase <- NA
}
else
{
var_cw_cont <- true.fun(var, 'treatment')
var_ind_cont <- NA
var_cw_diff <- true.fun1(var, 'treatment')
var_ind_diff <- NA
which1 <- strat.fun(var)
thebase <- ifelse(grepl("Contr", which1), "cw_cont", "cw_diff")
}
var_tab <- rbind(var_cw_cont, var_ind_cont, var_cw_diff, var_ind_diff)
var_tab <- cbind (var_tab, c("cw_cont", "ind_cont", "cw_diff", "ind_diff"))
var_tab[4] <- thebase
colnames(var_tab)[3:4] <- c("version", "base")
var_tab[4] <- ifelse(var_tab[[4]] == var_tab[[3]], 1, 0)
return(var_tab)
}
#(trust_tab <- analysis.fun(var='attitude'))
#(in_tab <- analysis.fun('in'))
#con_tab <- analysis.fun('contactOnly')
#r_tab <- analysis.fun(var='rMean')
#pgp_tab <- analysis.fun(var='pgp_amount_end')
# Chunk 3
# loop over all outcomes
outcome_list <- c("attitude", "in", 'contactOnly',
'rMean', "end_exp",
"pgp_donate_end", "pgp_amount_end")
newList <- vector(mode="list", length=length(outcome_list))
# Chunk 5
load("list_of_coefs_and_ps.Rda")
# Chunk 7
load("list_of_rank_bin_raw.Rda")
stateList <- vector(mode="list", length=length(outcome_list))
stateList
outcome_list
names(stateList)
names(stateList) <- outcome_list
names(stateList)
stateList
i=1
thelm <- lm_robust(ag.df[,outcome_list[i]]~ag.df[,"treatment"]*state,
clusters = psu, data=ag.df)
stateList <- vector(mode="list", length=length(outcome_list))
thelm <- lm_robust(ag.df[,outcome_list[i]]~ag.df[,"treatment"]*state,
clusters = psu, data=ag.df)
outcome_list
lm_robust(rmean~ag.df[,"treatment"]*state,
clusters = psu, data=ag.df)
lm_robust(rMean~ag.df[,"treatment"]*state,
clusters = psu, data=ag.df)
thelm <- lm_robust(ag.df[,outcome_list[i]]~ag.df[,"treatment"]*state,
clusters = psu, data=ag.df)
i=1
thelm <- lm_robust(ag.df[,outcome_list[i]]~ag.df[,"treatment"]*state,
clusters = psu, data=ag.df)
outcome_list_state <- c(paste0(outcome_list[1:3], "_cw"), outcome_list[4:length(outcome_list)]
)
outcome_list_state
outcome_list_state <- c(paste0(outcome_list[1:3], "_cw"), outcome_list[4:length(outcome_list)])
outcome_list_state <- c(paste0(outcome_list[1:3], "_cw"), outcome_list[4:length(outcome_list)])
stateList <- vector(mode="list", length=length(outcome_list_state))
i=1
thelm <- lm_robust(ag.df[,outcome_list_state[i]]~ag.df[,"treatment"]*state,
clusters = psu, data=ag.df)
tidy(thelm)
stateList[[i]] <- tidy(thelm)[, c(1,2,5)]
outcome_list_state <- c(paste0(outcome_list[1:3], "_cw"), outcome_list[4:length(outcome_list)])
stateList <- vector(mode="list", length=length(outcome_list_state))
for(i in 1:length(outcome_list_state))
{
thelm <- lm_robust(ag.df[,outcome_list_state[i]]~ag.df[,"treatment"]*state,
clusters = psu, data=ag.df)
stateList[[i]] <- tidy(thelm)[, c(1,2,5)]
}
names(stateList) <- outcome_list_state
stateList
save(stateList, file="state_list.Rda")
ag.df$farm_past <- ifelse(grepl(".farmers", ag.df$comm), "farm", "past")
table(ag.df$farm_past)
table(ag.df$farm_past, ag.df$comm)
table(ag.df$comm, ag.df$farm_past)
i
i=1
thelm <- lm_robust(ag.df[,outcome_list_state[i]]~ag.df[,"treatment"]*farm_past+state,
clusters = psu, fixed_effects = state, data=ag.df)
farmList <- vector(mode="list", length=length(outcome_list_state))
thelm <- lm_robust(ag.df[,outcome_list_state[i]]~ag.df[,"treatment"]*farm_past+state,
clusters = psu, fixed_effects = state, data=ag.df)
tidy(thelm)
lm_robust(ag.df[,outcome_list_state[i]]~ag.df[,"treatment"]*farm_past+state,
clusters = psu, data=ag.df)
lm_robust(ag.df[,outcome_list_state[i]]~ag.df[,"treatment"]*farm_past,
clusters = psu, fixed_effects = state, data=ag.df)
lm_robust(ag.df[,outcome_list_state[i]]~ag.df[,"treatment"]*state,
clusters = psu, data=ag.df)
farmList <- vector(mode="list", length=length(outcome_list_state))
for(i in 1:length(outcome_list_state))
{
thelm <- lm_robust(ag.df[,outcome_list_state[i]]~ag.df[,"treatment"]*farm_past,
clusters = psu, fixed_effects = state, data=ag.df)
farmList[[i]] <- tidy(thelm)[, c(1,2,5)]
}
names(farmList) <- outcome_list_state
farmList
save(farmList, file="farm_list.Rda")
load("state_list.Rda")
load("farm_list.Rda")
farmList
setwd("C:/Users/chris/Repos/ecpn_submission/appendix")
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE)
#load()
# Chunk 2
load("../data_and_code/survey_dat/d_analysis/list_of_coefs_and_ps.Rda")
load("../data_and_code/survey_dat/d_analysis/list_of_rank_bin_raw.Rda")
#newList[[3]]
#var_tab
attitude_tab <- newList[[1]][,c(1:2,4)]
colnames(attitude_tab) <- c("coefficient", "p-value", "base")
rownames(attitude_tab) <- c("Controlling-for & ICW", "Controlling-for & Additive",
"Differencing & ICW", "Differencing & Additive")
attitude_tab <- round(attitude_tab,3)
attitude_tab <- knitr::kable(attitude_tab, format="latex")
# Chunk 3
security_tab <- newList[[2]][,c(1:2,4)]
colnames(security_tab) <- c("coefficient", "p-value", "base")
rownames(security_tab) <- c("Controlling-for & ICW", "Controlling-for & Additive",
"Differencing & ICW", "Differencing & Additive")
security_tab <- round(security_tab,3)
security_tab <- knitr::kable(security_tab, format="latex")
# Chunk 4
contact_tab <- newList[[3]][,c(1:2,4)]
var_tab$base <- c(0,0,0,1,0,0)
var_tab <- var_tab[c(2,3,5,6),]
contact_tab <- rbind(contact_tab, var_tab)
colnames(contact_tab) <- c("coefficient", "p-value", "base")
rownames(contact_tab) <- c("Controlling-for & ICW & Ranks", "Controlling-for & Additive & Ranks",
"Differencing & ICW & Ranks", "Differencing & Additive & Ranks",
"Controlling-for & ICW & Categories",
"Controlling-for & ICW & Raw",
"Differencing & ICW & Categories",
"Differencing & ICW & Raw")
contact_tab <- round(contact_tab,3)
contact_tab <- knitr::kable(contact_tab, format="latex")
# Chunk 5
percExp_tab <- newList[[4]][c(1,3),c(1:2,4)]
colnames(percExp_tab) <- c("coefficient", "p-value", "base")
rownames(percExp_tab) <- c("Controlling-for",
"Differencing")
percExp_tab <- round(percExp_tab,3)
percExp_tab <- knitr::kable(percExp_tab, format="latex")
# Chunk 6
endExp_tab <- newList[[5]][c(1,3),c(1:2,4)]
colnames(endExp_tab) <- c("coefficient", "p-value", "base")
rownames(endExp_tab) <- c("Controlling-for",
"Differencing")
endExp_tab <- round(endExp_tab,3)
endExp_tab <- knitr::kable(endExp_tab, format="latex")
# Chunk 7
pgg_tab <- rbind(newList[[6]][1,c(1:2)], newList[[7]][1,c(1:2)])
colnames(pgg_tab) <- c("coefficient", "p-value")
rownames(pgg_tab) <- c("Donation (binary)",
"Donation amount")
pgg_tab <- round(pgg_tab,3)
pgg_tab <- knitr::kable(pgg_tab, format="latex")
load("../data_and_code/survey_dat/d_analysis/list_of_coefs_and_ps_ind.Rda")
load("../data_and_code/survey_dat/d_analysis/list_of_rank_bin_raw_ind.Rda")
newList_ind
rm(list=ls())
load("list_of_coefs_and_ps_ind.Rda")
setwd("C:/Users/chris/Repos/ecpn_submission/data_and_code/survey_dat/d_analysis")
load("list_of_coefs_and_ps_ind.Rda")
newList
newList_ind <- newList
save(newList_ind, file="list_of_coefs_and_ps_ind.Rda")
rm(list=ls())
load("list_of_coefs_and_ps_ind.Rda")
load("../data_and_code/survey_dat/d_analysis/state_list.Rda")
setwd("C:/Users/chris/Repos/ecpn_submission/appendix")
load("../data_and_code/survey_dat/d_analysis/state_list.Rda")
load("../data_and_code/survey_dat/d_analysis/farm_list.Rda")
setwd("C:/Users/chris/Repos/ecpn_submission/data_and_code/survey_dat/d_analysis")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
set.seed(7867564)
rm(list=ls())
load("../b_creating_outcomes/f2-panelData.Rdata")
#library(NPC) # archived
library(estimatr)
library(mosaic)
library(coin)
library(robustbase)
#True p-value function.
load("true_fun_ind.rda")
#true.fun(var='x_cw', tr='treatment')
#true.fun(var='cohes_cw_resid', tr='tr_resid') # Could be useful if confounders
#true.fun(var='cohes_cw', tr='bene_cw')
#true.fun(var="pgp_amount_y1", tr='treatment')
#true.fun(var="pgp_amount_y1", tr='bene_cw')
#com.fun(var="x_cw", nsims=1000)
#com.fun1(var="x_cw", nsims=1000)
#strat.fun("cohes_cw_y0")
#strat.fun("x_cw_y0")
# Chunk 2
# make treatment variables
panel.df$tr_f <- droplevels(interaction(panel.df$treatment, panel.df$committee))
panel.df$tr_n <- as.numeric(panel.df$tr_f)
# Chunk 3
# matrices sooooo fast
system.time(replicate(10000, data.frame(thecoef=c(NA, NA), truep=c(NA, NA))))
system.time(replicate(10000, matrix(NA, nrow=2, ncol=2, dimnames=list(NULL, c("thecoef", "truep")))))
#chris: doesnt work with pgp
analysis.fun <- function(var,nsims)
{
if(paste0(var, "_cw_y1") %in% names(panel.df))
{
var_cw_cont <- comp.fun(paste0(var, "_cw"), nsims)
var_ind_cont <- comp.fun(paste0(var, "_index"), nsims)
var_cw_diff <- comp.fun1(paste0(var, "_cw"), nsims)
var_ind_diff <- comp.fun1(paste0(var, "_index"), nsims)
which1 <- strat.fun(paste0(var, "_cw_y0"))
thebase <- ifelse(grepl("Contr", which1), "cw_cont", "cw_diff")
}
else if(grepl("pgp", var))
{
var_cw_cont <- comp.fun1(var, nsims)
var_ind_cont <- matrix(NA, nrow=2, ncol=2, dimnames=list(NULL, c("thecoef", "truep")))
var_cw_diff <- matrix(NA, nrow=2, ncol=2, dimnames=list(NULL, c("thecoef", "truep")))
var_ind_diff <- matrix(NA, nrow=2, ncol=2, dimnames=list(NULL, c("thecoef", "truep")))
which1 <- NA
thebase <- NA
}
else
{
var_cw_cont <- comp.fun(var, nsims)
var_ind_cont <- matrix(NA, nrow=2, ncol=2, dimnames=list(NULL, c("thecoef", "truep")))
var_cw_diff <- comp.fun1(var, nsims)
var_ind_diff <- matrix(NA, nrow=2, ncol=2, dimnames=list(NULL, c("thecoef", "truep")))
which1 <- strat.fun(var)
thebase <- ifelse(grepl("Contr", which1), "cw_cont", "cw_diff")
}
var_tab <- rbind(var_cw_cont, var_ind_cont, var_cw_diff, var_ind_diff)
var_tab <- cbind (var_tab, c(rep("cw_cont", 2),
rep("ind_cont",2),
rep("cw_diff",2),
rep("ind_diff",2)))
var_tab[4] <- thebase
colnames(var_tab)[3:4] <- c("version", "base")
var_tab[4] <- ifelse(var_tab[[4]] == var_tab[[3]], 1, 0)
return(var_tab)
}
#(trust_tab <- analysis.fun(var='attitude', nsims=100))
#(in_tab <- analysis.fun('in', nsims=100))
#(con_tab <- analysis.fun('contactOnly', nsims=100))
#(pgp_tab <- analysis.fun(var='pgp_amount_y1', nsims=100))
# Chunk 5
load("list_of_coefs_and_ps_ind.Rda")
# Chunk 6
table(panel.df$contactOnly_raw_cw)
table(panel.df$contactOnly_cats_cw)
table(panel.df$contactOnly_cw)
nsims=3000
var_cw_cont <- comp.fun(paste0("contactOnly", "_cw"), nsims)
var_cats_cont <- comp.fun(paste0("contactOnly_cats", "_cw"), nsims)
var_raw_cont <- comp.fun(paste0("contactOnly_raw", "_cw"), nsims)
var_cw_diff <- comp.fun1(paste0("contactOnly", "_cw"), nsims)
var_cats_diff <- comp.fun1(paste0("contactOnly_cats", "_cw"), nsims)
var_raw_diff <- comp.fun1(paste0("contactOnly_raw", "_cw"), nsims)
var_tab_ind <- rbind(var_cw_cont, var_cats_cont, var_raw_cont,
var_cw_diff, var_cats_diff, var_raw_diff)
save(var_tab_ind, file="list_of_rank_bin_raw_ind.Rda")
# loop over all placebo outcomes
placebo_list <- c("vio",
"violence_group.criminals",
"violence_group.defend_group",
"violence_group.defend_religion",
"violence_group.government",
"violence_group.maintain_culture",
"violence_group.retaliate",
'outgroup_atts_group.trust_rel',
"radio",
"disp_index")
analysis.fun(var=placebo_list[1])
analysis.fun(var=placebo_list[1], nsims=100)
analysis.fun(var=placebo_list[10],nsims=100)
placeboList_ind <- vector(mode="list", length=length(placebo_list))
for(i in 1:length(placebo_list))
{
placeboList_ind[[i]] <- analysis.fun(placebo_list[i])
}
placeboList_ind <- vector(mode="list", length=length(placebo_list))
for(i in 1:length(placebo_list))
{
placeboList_ind[[i]] <- analysis.fun(placebo_list[i], nsims=3000)
}
save(placeboList_ind, file="pl_list_of_coefs_and_ps_ind.Rda")
placeboList
placeboList_ind
load("../data_and_code/survey_dat/d_analysis/pl_list_of_coefs_and_ps.Rda")
setwd("C:/Users/chris/Repos/ecpn_submission/appendix")
load("../data_and_code/survey_dat/d_analysis/pl_list_of_coefs_and_ps.Rda")
placeboList
pl_vio_tab <- placeboList[[1]][,c(1:2,4)]
pl_vio_tab <- placeboList[[1]][,c(1:2,4)]
pl_vio_tab
rownames(pl_vio_tab) <- c("Controlling-for & ICW", "Controlling-for & Additive",
"Differencing & ICW", "Differencing & Additive")
placeboList[[2:7]]
placeboList[[c(2,3)]]
placeboList
placeboList[[2]]
placeboList[[2]][c(1,3),c(1:2,4)]
pl_vio_tab1 <- rbind(placeboList[[2]][c(1,3),c(1:2,4)],
placeboList[[3]][c(1,3),c(1:2,4)],
placeboList[[4]][c(1,3),c(1:2,4)],
placeboList[[5]][c(1,3),c(1:2,4)],
placeboList[[6]][c(1,3),c(1:2,4)],
placeboList[[7]][c(1,3),c(1:2,4)])
pl_vio_tab1
colnames(pl_vio_tab1) <- c("coefficient", "p-value", "base")
rownames(pl_vio_tab1) <- c("Bring criminals to justice: Controlling-for", "Bring criminals to justice: Differencing",
"Defend one’s group: Controlling-for", "Defend one’s group: Differencing",
"Defend one’s religion: Controlling-for", "Defend one’s religion: Differencing",
"Force the government to change their policies: Controlling-for", "Force the government to change their policies: Differencing",
"Maintain culture and traditions: Controlling-for", "Maintain culture and traditions: Differencing",
"Retaliate against violence: Controlling-for", "Retaliate against violence: Differencing")
pl_vio_tab1 <- round(pl_vio_tab1,3)
pl_vio_tab1
placeboList_ind[[1]]
pl_tab_ind <- placeboList_ind[[1]][,c(1:2,4)]
colnames(pl_tab_ind) <- c("coefficient", "p-value", "base")
pl_tab_ind
rownames(pl_tab_ind) <- c("Non: Controlling-for & ICW", "Part: Controlling-for & ICW",
"Non: Controlling-for & Additive", "Part: Controlling-for & Additive",
"Non: Differencing & ICW", "Part: Differencing & ICW",
"Non: Differencing & Additive", "Part: Differencing & Additive")
pl_tab_ind <- round(pl_tab_ind,3)
pl_tab_ind
placeboList_ind
placeboList
setwd("C:/Users/chris/Repos/ecpn_submission/data_and_code/survey_dat/d_analysis")
setwd("C:/Users/chris/Repos/ecpn_submission/data_and_code/survey_dat/d_analysis")
