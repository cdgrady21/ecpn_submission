#table(test$newvar)
#test$newvar <- countFun(var=test$clash_details_group.violence_when1, cats=3)
#table(df$clash_details_group.violence_when1)
#table(test$newvar)
trustVars <- names(df)[grepl("trust_(x|area)", names(df))]
summary(df[,trustVars])
index.fun <- function(vars)
{
df[,vars] <- reshape::rescaler(df[,vars],type="range")
return(rowMeans(df[,vars],na.rm=T))
}
index.fun(trustVars)
dim(index.fun(trustVars))
vars <- trustVars
df[,vars]
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(estimatr)
library(dplyr)
rm(list=ls())
load("../dataCombine.Rdata")
# Chunk 2
#test <- df
# chris: should have had it ignore vars with a max of 1 with an "if" statement. Right now, just not applying it to those vars.
# this removes 0s and then make those their own category.
countFun <- function(var, cats)
{
thing <- quantile(var[!var %in% 0], na.rm=T, prob=0:cats/cats)
var_count <- cut(var, thing, include.lowest = T, labels=F)
newvar <- as.vector(ifelse(var %in% 0, var, var_count))
newvar <- reshape::rescaler(newvar, type="range")
return(newvar)
}
#test$newvar <- countFun(var=test$clash_details_group.violence_when, cats=3)
#table(df$clash_details_group.violence_when)
#table(test$newvar)
#test$newvar <- countFun(var=test$clash_details_group.violence_when1, cats=3)
#table(df$clash_details_group.violence_when1)
#table(test$newvar)
trustVars <- names(df)[grepl("trust_(x|area)", names(df))]
vars <- trustVars
df[,vars]
reshape::rescaler(df[,vars],type="range")
return(rowMeans(df[,vars],na.rm=T))
rowMeans(df[,vars],na.rm=T)
levels(rowMeans(df[,vars],na.rm=T))
length(rowMeans(df[,vars],na.rm=T))
nrow(df)
index.fun <- function(vars)
{
df[,vars] <- reshape::rescaler(df[,vars],type="range")
return(rowMeans(df[,vars],na.rm=T))
}
summary(df[,trustVars])
df[,trustVars] <- reshape::rescaler(df[,trustVars],type="range")
df$trust_index <- rowMeans(df[,trustVars],na.rm=T)
check.fun(trust_index)
check.fun <- function(index)
{
summary(df[,index])
psych::alpha(df[,index]) # 0.89
}
check.fun(trust_index)
df$trust_index
check.fun('trust_index')
index='trust_index'
summary(df[,index])
psych::alpha(df[,index]) # 0.89
check.fun('trust_index', trustVars)
check.fun <- function(index,vars)
{
summary(df[,index])
psych::alpha(df[,vars]) # 0.89
}
df[,trustVars] <- reshape::rescaler(df[,trustVars],type="range")
df$trust_index <- rowMeans(df[,trustVars],na.rm=T)
check.fun('trust_index', trustVars)
names(df)[1:20]
lm(trust_index~treatment*survey, data=df)
lm(trust_x~treatment*survey, data=df)
trustVars
lm(outgroup_atts_group.trust_x~treatment*survey, data=df)
lm(social_cohesion_group.trust_area~treatment*survey, data=df)
check.fun('trust_index', trustVars)
psych::alpha(df[,trustVars])
distVars <- names(df)[grepl("comfort_group", names(df))]
distVars
summary(df[,distVars])
distVars <- names(df)[grepl("comfort_group", names(df))]
df[,distVars] <- reshape::rescaler(df[,distVars],type="range")
df$dist_index <- rowMeans(df[,distVars],na.rm=T)
check.fun('dist_index', distVars)
lm(dist_index~treatment*survey, data=df)
allTrustVars <- c(trustVars,distVars)
allTrustVars
summary(df[,allTrustVars])
df$allTrust_index <- rowMeans(df[allTrustVars],na.rm=T)
check.fun('allTrust_index', allTrustVars)
lm(allTrust_index~treatment*survey, data=df)
# less sharing resources == higher score
shareVars <- names(df)[grepl("^share_[a-z]*$", names(df))]
shareVars
df$share_index <- rowMeans(df[,shareVars], na.rm=T)
psych::alpha(df[,shareVars]) #0.39
# less sharing resources == higher score
shareVars <- names(df)[grepl("^share_[a-z]*$", names(df))]
df[,shareVars] <- reshape::rescaler(df[,shareVars],type="range")
df$share_index <- rowMeans(df[,shareVars],na.rm=T)
check.fun('share_index', shareVars)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(estimatr)
library(dplyr)
rm(list=ls())
load("../dataCombine.Rdata")
# Chunk 2
#test <- df
# chris: should have had it ignore vars with a max of 1 with an "if" statement. Right now, just not applying it to those vars.
# this removes 0s and then make those their own category.
countFun <- function(var, cats)
{
thing <- quantile(var[!var %in% 0], na.rm=T, prob=0:cats/cats)
var_count <- cut(var, thing, include.lowest = T, labels=F)
newvar <- as.vector(ifelse(var %in% 0, var, var_count))
newvar <- reshape::rescaler(newvar, type="range")
return(newvar)
}
#test$newvar <- countFun(var=test$clash_details_group.violence_when, cats=3)
#table(df$clash_details_group.violence_when)
#table(test$newvar)
#test$newvar <- countFun(var=test$clash_details_group.violence_when1, cats=3)
#table(df$clash_details_group.violence_when1)
#table(test$newvar)
# Chunk 3
trustVars <- names(df)[grepl("trust_(x|area)", names(df))]
check.fun <- function(index,vars)
{
summary(df[,index])
psych::alpha(df[,vars]) # 0.89
}
df[,trustVars] <- reshape::rescaler(df[,trustVars],type="range")
df$trust_index <- rowMeans(df[,trustVars],na.rm=T)
check.fun('trust_index', trustVars)
#lm(social_cohesion_group.trust_area~treatment*survey, data=df)
# Chunk 4
distVars <- names(df)[grepl("comfort_group", names(df))]
df[,distVars] <- reshape::rescaler(df[,distVars],type="range")
df$dist_index <- rowMeans(df[,distVars],na.rm=T)
check.fun('dist_index', distVars)
#lm(dist_index~treatment*survey, data=df)
# Chunk 5
allTrustVars <- c(trustVars,distVars)
df$allTrust_index <- rowMeans(df[allTrustVars],na.rm=T)
check.fun('allTrust_index', allTrustVars)
#lm(allTrust_index~treatment*survey, data=df)
# less sharing resources == higher score
shareVars <- names(df)[grepl("^share_[a-z]*$", names(df))]
df[,shareVars] <- reshape::rescaler(df[,shareVars],type="range")
df$share_index <- rowMeans(df[,shareVars],na.rm=T)
check.fun('share_index', shareVars)
lm(share_market~treatment*survey, data=df)
# less sharing land resources == higher score
shareVars <- names(df)[grepl("^share_(market|pasture)$", names(df))]
shareVars
df[,shareVars] <- reshape::rescaler(df[,shareVars],type="range")
df$share_index <- rowMeans(df[,shareVars],na.rm=T)
check.fun('share_index', shareVars)
# less sharing land resources == higher score
shareVars <- names(df)[grepl("^share_(farmland|pasture)$", names(df))]
df[,shareVars] <- reshape::rescaler(df[,shareVars],type="range")
df$share_index <- rowMeans(df[,shareVars],na.rm=T)
check.fun('share_index', shareVars)
lm(share_index~treatment*survey, data=df)
lm(share_market~treatment*survey, data=df)
# more sharing land resources == bad
shareVars <- names(df)[grepl("^share_(farmland|pasture)$", names(df))]
df[,shareVars] <- reshape::rescaler(df[,shareVars],type="range")
df$share_index <- rowMeans(df[,shareVars],na.rm=T)
check.fun('share_index', shareVars)
lm(share_index~treatment*survey, data=df)
lm(share_index~trust_index*survey, data=df)
lm(share_index~trust_index, data=df)
lm(share_index~treatment*survey+state, data=df)
lm(allTrust_index~treatment*survey+state, data=df)
lm(allTrust_index~treatment*survey, data=df)
lm(dist_index~treatment*survey+state, data=df)
lm(social_cohesion_group.trust_area~treatment*survey+state, data=df)
lm(trust_index~treatment*survey+state, data=df)
summary(df$share_market)
summary(df$share_market_dispute)
summary(df$share_market_tension)
# want: when land resources are shared, are they causing disputes?
# want: are the disputes resolved?
# more sharing resources, fewer disputes, & better resolved disputes (this big index does not make sense. sharing farmland opens up qs about disputes.)
numDisVars <- names(df)[grepl("(dispute$|tension$)", names(df))]
resolveVars <- names(df)[grepl("(resolve[^s]|persist)", names(df))]
numDisVars
resolveVars
summary(df$market_disputes_resolved)
#is shared land causing disputes? higher scores == fewer disputes.
numDisVars <- names(df)[grepl("(dispute$|tension$)", names(df))]
numDisVars
#is shared land causing disputes? higher scores == fewer disputes.
numDisVars <- names(df)[grepl("(farmland_pasture)_(dispute$|tension$)", names(df))]
numDisVars
#is shared land causing disputes? higher scores == fewer disputes.
numDisVars <- names(df)[grepl("(farmland|pasture)_(dispute$|tension$)", names(df))]
numDisVars
#is shared land causing disputes? higher scores == fewer disputes.
dispVars <- names(df)[grepl("(farmland|pasture)_(dispute$|tension$)", names(df))]
dispVars
summary(df[,dispVars])
df[,dispVars] <- reshape::rescaler(df[,dispVars],type="range")
summary(df[,dispVars])
df$disp_index <- rowMeans(df[,dispVars],na.rm=T)
check.fun('disp_index', dispVars)
lm(disp_index~treatment*survey+state, data=df)
# are the disputes resolved?
resolveVars <- names(df)[grepl("(resolve[^s]|persist)", names(df))]
resolveVars
# are the disputes resolved?
resolveVars <- names(df)[grepl("((farmland|pasture)resolve[^s]|persist)", names(df))]
resolveVars
# are the disputes resolved?
resolveVars <- names(df)[grepl("((farmland|pasture)_resolve[^s]|persist)", names(df))]
resolveVars
# are the disputes resolved?
resolveVars <- names(df)[grepl("((farmland|pasture)_resolve|persist)", names(df))]
resolveVars
# are the disputes resolved?
resolveVars <- names(df)[grepl("((farmland|pasture)|resolve_|persist)", names(df))]
resolveVars
# are the disputes resolved?
resolveVars <- names(df)[grepl("((farmland|pasture)_dispute_resolved|resolve_|persist)", names(df))]
resolveVars
# are the disputes resolved?
resolveVars <- names(df)[grepl("(farmland|pasture)_dispute_resolved|resolve_|persist", names(df))]
resolveVars
# are the disputes resolved?
resolveVars <- names(df)[grepl("(farmland|pasture)_disputes_resolved|resolve_|persist", names(df))]
resolveVars
summary(df[,resolveVars])
summary(df1[,resolveVars])
summary(base[,resolveVars])
table(base$dispute_persist)
table(df1$dispute_persist)
table(base$farmland_disputes_resolved)
table(df1$farmland_disputes_resolved)
table(df1$resolve_peace)
table(base$resolve_peace)
summary(df[,resolveVars])
##dispute_persist: coded so high is good (never persist)
##farmland/pasture disputes resolved coded so high is good (always resolved)
##resolve_peace coded so that high is good (strongly agree resolved peacefully)
df$resolve_index <- rowMeans(df[,resolveVars],na.rm=T)
check.fun('resolve_index', resolveVars)
check.fun('trust_index', trustVars)
check.fun <- function(index,vars)
{
return(summary(df[,index]))
return(psych::alpha(df[,vars]))
}
check.fun('trust_index', trustVars)
check.fun <- function(index,vars)
{
t1 <- summary(df[,index])
t2 <- psych::alpha(df[,vars])
return(c(t1,t2))
}
check.fun('trust_index', trustVars)
t1
check.fun <- function(index,vars)
{
t1 <- summary(df[,index])
t2 <- psych::alpha(df[,vars])
return(list(t1,t2))
}
check.fun('trust_index', trustVars)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(estimatr)
library(dplyr)
rm(list=ls())
load("../dataCombine.Rdata")
# Chunk 2
#test <- df
# chris: should have had it ignore vars with a max of 1 with an "if" statement. Right now, just not applying it to those vars.
# this removes 0s and then make those their own category.
countFun <- function(var, cats)
{
thing <- quantile(var[!var %in% 0], na.rm=T, prob=0:cats/cats)
var_count <- cut(var, thing, include.lowest = T, labels=F)
newvar <- as.vector(ifelse(var %in% 0, var, var_count))
newvar <- reshape::rescaler(newvar, type="range")
return(newvar)
}
#test$newvar <- countFun(var=test$clash_details_group.violence_when, cats=3)
#table(df$clash_details_group.violence_when)
#table(test$newvar)
#test$newvar <- countFun(var=test$clash_details_group.violence_when1, cats=3)
#table(df$clash_details_group.violence_when1)
#table(test$newvar)
# Chunk 3
trustVars <- names(df)[grepl("trust_(x|area)", names(df))]
check.fun <- function(index,vars)
{
t1 <- summary(df[,index])
t2 <- psych::alpha(df[,vars])
return(list(t1,t2))
}
df[,trustVars] <- reshape::rescaler(df[,trustVars],type="range")
df$trust_index <- rowMeans(df[,trustVars],na.rm=T)
check.fun('trust_index', trustVars)
#lm(trust_index~treatment*survey+state, data=df)
distVars <- names(df)[grepl("comfort_group", names(df))]
df[,distVars] <- reshape::rescaler(df[,distVars],type="range")
df$dist_index <- rowMeans(df[,distVars],na.rm=T)
check.fun('dist_index', distVars)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(estimatr)
library(dplyr)
rm(list=ls())
load("../dataCombine.Rdata")
# Chunk 2
#test <- df
# chris: should have had it ignore vars with a max of 1 with an "if" statement. Right now, just not applying it to those vars.
# this removes 0s and then make those their own category.
countFun <- function(var, cats)
{
thing <- quantile(var[!var %in% 0], na.rm=T, prob=0:cats/cats)
var_count <- cut(var, thing, include.lowest = T, labels=F)
newvar <- as.vector(ifelse(var %in% 0, var, var_count))
newvar <- reshape::rescaler(newvar, type="range")
return(newvar)
}
#test$newvar <- countFun(var=test$clash_details_group.violence_when, cats=3)
#table(df$clash_details_group.violence_when)
#table(test$newvar)
#test$newvar <- countFun(var=test$clash_details_group.violence_when1, cats=3)
#table(df$clash_details_group.violence_when1)
#table(test$newvar)
# Chunk 3
trustVars <- names(df)[grepl("trust_(x|area)", names(df))]
check.fun <- function(index,vars)
{
t1 <- summary(df[,index])
t2 <- psych::alpha(df[,vars])
return(list(t1,t2))
}
df[,trustVars] <- reshape::rescaler(df[,trustVars],type="range")
df$trust_index <- rowMeans(df[,trustVars],na.rm=T)
check.fun('trust_index', trustVars)
#lm(trust_index~treatment*survey+state, data=df)
# Chunk 4
distVars <- names(df)[grepl("comfort_group", names(df))]
df[,distVars] <- reshape::rescaler(df[,distVars],type="range")
df$dist_index <- rowMeans(df[,distVars],na.rm=T)
check.fun('dist_index', distVars)
#lm(dist_index~treatment*survey+state, data=df)
# Chunk 5
allTrustVars <- c(trustVars,distVars)
df$allTrust_index <- rowMeans(df[allTrustVars],na.rm=T)
check.fun('allTrust_index', allTrustVars)
#lm(allTrust_index~treatment*survey+state, data=df)
# Chunk 6
# more sharing land resources == bad
shareVars <- names(df)[grepl("^share_(farmland|pasture)$", names(df))]
df[,shareVars] <- reshape::rescaler(df[,shareVars],type="range")
df$share_index <- rowMeans(df[,shareVars],na.rm=T)
check.fun('share_index', shareVars)
#lm(share_index~treatment*survey+state, data=df)
# when land resources are shared, are they causing disputes? higher scores == more disputes == bad
dispVars <- names(df)[grepl("(farmland|pasture)_(dispute$|tension$)", names(df))]
df$disp_index <- rowMeans(df[,dispVars],na.rm=T)
check.fun('disp_index', dispVars)
# when they occur, are the disputes resolved?
resolveVars <- names(df)[grepl("(farmland|pasture)_disputes_resolved|resolve_|persist", names(df))]
summary(df[,resolveVars])
##dispute_persist: coded so high is good (never persist)
##farmland/pasture disputes resolved coded so high is good (always resolved)
##resolve_peace coded so that high is good (strongly agree resolved peacefully)
df$resolve_index <- rowMeans(df[,resolveVars],na.rm=T)
check.fun('resolve_index', resolveVars)
lm(resolve_index~treatment*survey+state, data=df)
df$barg_index <- df$resolve_index
summary(df$barg_index)
summary(df$share_index)
df$barg_index <- df$share_index*-1
table(df$share_index)
table(df1$share_farmland)
table(base$share_farmland)
table(df$share_farmland_dispute)
table(df$share_farmland_tension)
table(df$share_farmland_dispute, df$share_farmland_tension)
df$barg_index_farm <- ifelse(df$share_farmland %in% 0, 1,
ifelse(df$share_farmland_dispute %in% 0, 1,
ifelse(df$share_farmland_dispute %in% 1, df$farmland_disputes_resolved, NA)))
table(df$barg_index_farm)
summary(df[,resolveVars])
summary(df[,dispVars])
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(estimatr)
library(dplyr)
rm(list=ls())
load("../dataCombine.Rdata")
# Chunk 2
#test <- df
# chris: should have had it ignore vars with a max of 1 with an "if" statement. Right now, just not applying it to those vars.
# this removes 0s and then make those their own category.
countFun <- function(var, cats)
{
thing <- quantile(var[!var %in% 0], na.rm=T, prob=0:cats/cats)
var_count <- cut(var, thing, include.lowest = T, labels=F)
newvar <- as.vector(ifelse(var %in% 0, var, var_count))
newvar <- reshape::rescaler(newvar, type="range")
return(newvar)
}
#test$newvar <- countFun(var=test$clash_details_group.violence_when, cats=3)
#table(df$clash_details_group.violence_when)
#table(test$newvar)
#test$newvar <- countFun(var=test$clash_details_group.violence_when1, cats=3)
#table(df$clash_details_group.violence_when1)
#table(test$newvar)
# Chunk 3
trustVars <- names(df)[grepl("trust_(x|area)", names(df))]
check.fun <- function(index,vars)
{
t1 <- summary(df[,index])
t2 <- psych::alpha(df[,vars])
return(list(t1,t2))
}
df[,trustVars] <- reshape::rescaler(df[,trustVars],type="range")
df$trust_index <- rowMeans(df[,trustVars],na.rm=T)
check.fun('trust_index', trustVars)
#lm(trust_index~treatment*survey+state, data=df)
# Chunk 4
distVars <- names(df)[grepl("comfort_group", names(df))]
df[,distVars] <- reshape::rescaler(df[,distVars],type="range")
df$dist_index <- rowMeans(df[,distVars],na.rm=T)
check.fun('dist_index', distVars)
#lm(dist_index~treatment*survey+state, data=df)
# Chunk 5
allTrustVars <- c(trustVars,distVars)
df$allTrust_index <- rowMeans(df[allTrustVars],na.rm=T)
check.fun('allTrust_index', allTrustVars)
#lm(allTrust_index~treatment*survey+state, data=df)
# Chunk 6
# higher scores == more sharing land resources == bad
shareVars <- names(df)[grepl("^share_(farmland|pasture)$", names(df))]
df[,shareVars] <- reshape::rescaler(df[,shareVars],type="range")
df$share_index <- rowMeans(df[,shareVars],na.rm=T)
check.fun('share_index', shareVars)
#lm(share_index~treatment*survey+state, data=df)
# Chunk 7
# when land resources are shared, are they causing disputes? higher scores == more disputes == bad
dispVars <- names(df)[grepl("(farmland|pasture)_(dispute$|tension$)", names(df))]
summary(df[,dispVars])
df$disp_index <- rowMeans(df[,dispVars],na.rm=T)
check.fun('disp_index', dispVars)
#lm(disp_index~treatment*survey+state, data=df)
###########################
# when they occur, are the disputes resolved? higher scores == more resolved == good.
resolveVars <- names(df)[grepl("(farmland|pasture)_disputes_resolved|resolve_|persist", names(df))]
summary(df[,resolveVars])
df[,resolveVars] <- reshape::rescaler(df[,resolveVars],type="range")
##dispute_persist: coded so high is good (never persist)
##farmland/pasture disputes resolved coded so high is good (always resolved)
##resolve_peace coded so that high is good (strongly agree resolved peacefully)
df$resolve_index <- rowMeans(df[,resolveVars],na.rm=T)
check.fun('resolve_index', resolveVars)
#lm(resolve_index~treatment*survey+state, data=df)
df$barg_index_farm <- ifelse(df$share_farmland %in% 0, 1,
ifelse(df$share_farmland_dispute %in% 0, 1,
ifelse(df$share_farmland_dispute %in% 1, df$farmland_disputes_resolved, NA)))
table(df$barg_index_farm)
table(df$share_farmland_dispute)
table(df$share_farmland_dispute, df$farmland_disputes_resolved)
table(df$share_farmland_dispute, df$farmland_disputes_resolved, exclude=c())
table(df$share_farmland_dispute)
table(df$share_farmland_dispute, df$farmland_disputes_resolved, exclude=c())
table(df$farmland_disputes_resolved)
table(df$farmland_disputes_resolved, exclude=c())
table(df2$farmland_disputes_resolved)
table(df2$farmland_disputes_resolved, exclude=c())
table(df2$share_farmland_dispute)
table(df2$share_farmland_dispute, df2$farmland_disputes_resolved)
table(df2$share_farmland_dispute, df2$farmland_disputes_resolved, exclude=c())
df$barg_index_farm <- ifelse(df$share_farmland %in% 0, 1,
ifelse(df$share_farmland_dispute %in% 0, 1, 99))
table(df$barg_index_farm)
table(df$share_farmland_dispute)
table(df$farmland_disputes_resolved)
table(df$farmland_disputes_resolved, exclude=c())
# something wrong; more respondents should have their value from "farmland_disputes_resolved"
df$barg_index_farm <- ifelse(df$share_farmland %in% 0, 1,
ifelse(df$share_farmland_dispute %in% 0, 1,
ifelse(df$share_farmland_dispute %in% 1, df$farmland_disputes_resolved, NA)))
table(df$barg_index_farm, exclude=c())
# something wrong; more respondents should have their value from "farmland_disputes_resolved"
df$barg_index_farm <- ifelse(df$share_farmland %in% 0, 1,
ifelse(df$share_farmland_dispute %in% 0, 1,
ifelse(!df$share_farmland_dispute %in% 0, df$farmland_disputes_resolved, NA)))
table(df$barg_index_farm, exclude=c())
# something wrong; more respondents should have their value from "farmland_disputes_resolved"
df$barg_index_farm <- ifelse(df$share_farmland %in% 0, 1,
ifelse(df$share_farmland_dispute %in% 0, 1,
ifelse(!(df$share_farmland_dispute %in% 0), df$farmland_disputes_resolved, NA)))
table(df$barg_index_farm, exclude=c())
table(df$farmland_disputes_resolved)
table(df$share_farmland_dispute, df$farmland_disputes_resolved, exclude=c())
