15/1000
100*(2.89)^25
100*(2.89^25)
100*2.89
100*1.0289
100*(1.0289^25)
100*(1.0289^24)
.09*.09
1-(.09*.09)
133/176
152/215
3*6
500/20
25*1*25
25*2*25
1250*1.1
3000000/12
3000000/180000
17-12
3*3*3
bag <- c(1,0,0,-1,-1,-1,-2,-2,-3,-4,-2,-2,-2,-4,-4,-5,1)
mean(bag)
quantile(bag,0.8)
quantile(bag,0.2)
quantile(bag,0.25)
once <- resample(bag,1,1000)
once <- sample(bag,1,1000, replace=T)
?sample
sample(bag,1,replace=T)
sample(bag,1,replace=T)
sample(bag,1,replace=T)
sample(bag,1,replace=T)
once <- replicate(sample(bag,1,replace=T),10000)
?replicate
once <- replicate(10000,sample(bag,1,replace=T))
mean(once)
quantile(0.25,once)
class(once)
once[1:10]
quantile(once,0.25)
twice <- replicate(10000,sample(bag,2,replace=T))
head(twice)
twice <- replicate(10000,sample(bag,2,replace=F))
twice[1:10]
library(mosaic)
bag
one.fun <- function()
{
once <- sample(bag,1,1000, replace=F)
return(max(once))
}
one.fun()
one.fun <- function()
{
once <- sample(bag,1,1000, replace=F)
return(max(once))
}
one.fun()
once <- sample(bag,1,1000, replace=F)
once <- sample(bag,1,1000, replace=F)
once
return(once)
one.fun <- function()
{
once <- sample(bag,1,1000, replace=F)
return(once)
}
one.fun()
once <- sample(bag,1,1000, replace=F)
once
once <- sample(bag,1,replace=F)
return(once)
one.fun <- function()
{
once <- sample(bag,1,replace=F)
return(once)
}
one.fun()
# one pull from bag
one.fun <- function()
{
once <- sample(bag,1,replace=F)
return(once)
}
one.fun()
one <- do(10000)*one.fun()
mean(one)
one
class(once)
mean(one$one.fun)
mean(bag)
# one pull from bag
one.fun <- function()
{
once <- sample(bag,1,replace=F)
return(once)
}
one <- do(10000)*one.fun()
mean(one$one.fun)
mean(bag)
quantile(bag,0.25)
quantile(bag,0.20)
quantile(bag,0.10)
quantile(bag,0.05)
twice <- sample(bag,2,replace=F)
twice
best <- max(twice)
best
## two pulls from bag
two.fun <- function()
{
twice <- sample(bag,2,replace=F)
best <- max(twice)
return(best)
}
two <- do(10000)*two.fun()
two
mean(two$two.fun)
mean(bag)-mean(two$two.fun)
# mean of two pulls is 1 higher than with 1 pull
quantile(two$two.fun,0.25)
# must be +2 for a 75% chance to pass test
quantile(two$two.fun,0.10)
# must be +2 for a 90% chance to pass test
quantile(two$two.fun,0.05)
length(bag)
1/17
# Quantile Comparison
quantile(bag,seq(0,1,0.1))
# Quantile Comparison
quantile(bag,seq(0,1,0.05))
quantile(two$two.fun,seq(0,1,0.05))
# must be +3 for a 75% chance to pass test
quantile(bag,0)
# must be +2 for a 90% chance to pass test
quantile(two$two.fun,0)
# must be +2 for a 90% chance to pass test
quantile(two$two.fun,0.05)
# must be +3 for a 95% chance to pass test
quantile(two$two.fun,0)
# Quantile Comparison
quantile(bag,seq(0,1,0.05))
quantile(two$two.fun,seq(0,1,0.05))
# Quantile Comparison
one_pull <- quantile(bag,seq(0,1,0.05))
two_pull <- quantile(two$two.fun,seq(0,1,0.05))
plot(one_pull)
plot(two_pull)
qqplot(one_pull,two_pull)
# plots
one_plot <- sample(bag,10000,replace=T)
one_plot
plot(one_plot)
plot(density(one_plot))
hist(one_plot)
hist(two$two.fun)
hist(one_plot, col="red")
mycol <- rgb(0, 0, 255, max = 255, alpha = 125, names = "blue50")
hist(two$two.fun, col=mycol)
hist1 <- hist(one_plot, col="red")
hist2 <- hist(two$two.fun, col=mycol)
hist1 <- hist(one_plot, col=c1)
# plots
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lt.pink")
hist1 <- hist(one_plot, col=c1)
hist2 <- hist(two$two.fun, col=c2)
plot(hist1)
plot(hist1, col=c1)
plot(hist2, col=c2, add=T)
plot(hist1, col=c1, xlim=c(-5,1))
plot(hist2, col=c2, add=T)
plot(hist2, col=c2, xlim=c(-5,1), add=T)
plot(hist1, col=c1, xlim=c(-5,1))
plot(hist2, col=c2, xlim=c(-5,1), add=T)
plot(hist1, col=c1, breaks=6, xlim=c(-5,1))
hist1 <- hist(one_plot, col=c1, breaks=6,)
hist1 <- hist(one_plot, col=c1, breaks=6)
hist1 <- hist(one_plot, col=c1, breaks=7)
hist1 <- hist(one_plot, col=c1, breaks=5)
?breaks
?hist
unique(bag)
paste(unique(bag))
paste(unique(bag), collapse=",")
hist1 <- hist(one_plot, col=c1, breaks=c(-5,-4,-3,-2,-1,0,1))
hist1 <- hist(one_plot, col=c1, breaks=c(-6,-5,-4,-3,-2,-1,0,1,2))
hist1 <- hist(one_plot, col=c1, breaks=c(-6,-5,-4,-3,-2,-1,0,1))
hist1 <- hist(one_plot, col=c1, breaks=c(-6,-5,-4,-3,-2,-1,0,1))
hist2 <- hist(two$two.fun, col=c2, breaks=c(-6,-5,-4,-3,-2,-1,0,1))
plot(hist1, col=c1)
plot(hist2, col=c2, add=T)
hist1 <- hist(one_plot, col=c1, breaks=c(-6,-5,-4,-3,-2,-1,0,1))
hist2 <- hist(two$two.fun, col=c2, breaks=c(-6,-5,-4,-3,-2,-1,0,1))
plot(hist1, col=c1)
plot(hist2, col=c2, add=T)
# Quantile Comparison
one_pull <- quantile(bag,seq(0,1,0.05))
two_pull <- quantile(two$two.fun,seq(0,1,0.05))
# Quantile Comparison
(one_pull <- quantile(bag,seq(0,1,0.05)))
(two_pull <- quantile(two$two.fun,seq(0,1,0.05)))
length(bag)
bag[1:16]
# GROTESQUE STATUE
bag <- c(1,1,0,0,-1,-1,-1,-2,-2,-3,-4,-2,-2,-2,-4,-4,-5)
library(mosaic)
# one pull from bag
mean(bag)
quantile(bag,0.25)
# must be +3 for a 75% chance to pass test
quantile(bag,0.10)
## two pulls from bag
two.fun <- function()
{
twice <- sample(bag,2,replace=F)
best <- max(twice)
return(best)
}
two <- do(10000)*two.fun()
mean(two$two.fun)
mean(bag)-mean(two$two.fun)
# mean of two pulls is 1 higher than with 1 pull
quantile(two$two.fun,0.25)
# must be +2 for a 75% chance to pass test
quantile(two$two.fun,0.10)
# must be +2 for a 90% chance to pass test
quantile(two$two.fun,0.05)
# must be +3 for a 95% chance to pass test
quantile(two$two.fun,0)
# Quantile Comparison
(one_pull <- quantile(bag,seq(0,1,0.05)))
# Quantile Comparison
(one_pull <- quantile(bag,seq(0,1,0.05)))
1/17
4/17
# plots
c1 <- rgb(173,216,230,max = 255, alpha = 80, names = "lt.blue")
c2 <- rgb(255,192,203, max = 255, alpha = 80, names = "lt.pink")
one_plot <- sample(bag,10000,replace=T)
hist1 <- hist(one_plot, col=c1, breaks=c(-6,-5,-4,-3,-2,-1,0,1))
hist2 <- hist(two$two.fun, col=c2, breaks=c(-6,-5,-4,-3,-2,-1,0,1))
plot(hist1, col=c1)
plot(hist2, col=c2, add=T)
bag[1:16]
# Compare to +2 to skill test
bag2 <- c(bag[1:16]+2, bag[17])
bag2
mean(bag2)
mean(two$two.fun)
(plus2 <- quantile(bag2,seq(0,1,0.05)))
# Quantile Comparison
(one_pull <- quantile(bag,seq(0,1,0.05)))
(two_pull <- quantile(two$two.fun,seq(0,1,0.05)))
# Quantile Comparison
(one_pull <- quantile(bag,seq(0,1,0.05)))
(two_pull <- quantile(two$two.fun,seq(0,1,0.05)))
(plus2 <- quantile(bag2,seq(0,1,0.05)))
184/8
6*80
175*80
175/2
5200*12
62400/100000
3000*12
40000/100000
11000000/.03
38+32+35
14/16
200000/10000000
84+78
120000/700000
?sample
roll1 <- rep(sample(1:6,1))
roll1 <- rep(sample(1:6,1))
roll1
roll1 <- rep(sample(1:6,1),6)
roll1
roll1 <- sample(1:6,6)
roll1
sum1 <- sum(roll1==1)
sum1
roll1
roll1 <- c(1,1,1,2,2,2)
roll1
sum(roll1==1)
roll1 <- sample(1:6,6)
roll1
roll1 <- sample(1:6,6, replace=T)
roll1
sum1 <- sum(roll1==1)
sum1
roll1 <- sample(1:6,6, replace=T)
roll1
roll1 <- sample(1:6,6, replace=T)
roll1
sum1 <- sum(roll1==1)
sum1
6-sum1
roll2 <- sample(1:6,6-sum1)
roll2
sum2 <- sum(roll2==1)
sum2
roll3 <- sample(1:6,6-(sum1+sum2))
roll3
sum(roll1,roll2,roll3)
roll1
sum(sum1,sum2,sum3)
sum3 <- sum(roll3==1)
sum(sum1,sum2,sum3)
sum1+sum2+sum3
tokyo.fun <- function()
{
roll1 <- sample(1:6,6, replace=T)
sum1 <- sum(roll1==1)
roll2 <- sample(1:6,6-sum1)
sum2 <- sum(roll2==1)
roll3 <- sample(1:6,6-(sum1+sum2))
sum3 <- sum(roll3==1)
return(sum(sum1,sum2,sum3))
#return(sum1+sum2+sum3)
}
?replicate
tokyo.fun()
tokyo.fun()
tokyo.fun()
tokyo.fun()
tokyo.fun()
tokyo.fun()
tokyo.fun()
tokyo.fun()
test <- replicate(10000,tokyo.fun)
test
test <- replicate(10000,tokyo.fun())
test
test <- system.time(replicate(10000,tokyo.fun()))
system.time(replicate(10000,tokyo.fun()))
system.time(replicate(10000,tokyo.fun()))
system.time(replicate(10000,tokyo.fun()))
system.time(replicate(10000,tokyo.fun()))
tokyo.fun <- function()
{
roll1 <- sample(1:6,6, replace=T)
sum1 <- sum(roll1==1)
roll2 <- sample(1:6,6-sum1)
sum2 <- sum(roll2==1)
roll3 <- sample(1:6,6-(sum1+sum2))
sum3 <- sum(roll3==1)
#return(sum(sum1,sum2,sum3))
return(sum1+sum2+sum3)
}
system.time(replicate(10000,tokyo.fun()))
system.time(replicate(10000,tokyo.fun()))
system.time(replicate(10000,tokyo.fun()))
system.time(replicate(10000,tokyo.fun()))
str(test)
test[1:5]
test <- replicate(10000,tokyo.fun())
test[1:5]
summary(test)
plot(frequency(test))
plot(density(test))
#plot(density(test))
hist(test)
?quantile
#plot(density(test))
#hist(test)
quantile(test,probs=(1,2,3,4,5,6))
#plot(density(test))
#hist(test)
quantile(test,probs=c(1,2,3,4,5,6)))
#plot(density(test))
#hist(test)
quantile(test,probs=c(1,2,3,4,5,6))
#plot(density(test))
#hist(test)
quantile(test,probs=seq(0,1,0.1))
ecdf(test)(5)
ecdf(test)(2)
ecdf(test)(1.9)
ecdf(test)(3)
ecdf(test)(2)
ecdf(test)
f <- ecdf(test)
f <- ecdf(test)(2)
f
quantile(x,.91)
quantile(test,.91)
f( quantile(test,.91) )
f <- ecdf(test)(2)
f <- ecdf(test)
f( quantile(test,.91) )
# Equivalently:
ecdf(test)( quantile(x,.91) )
# Equivalently:
ecdf(test)( quantile(test,.91) )
ecdf(test)(2)
quantile(test,.91)
# Equivalently:
ecdf(test)( quantile(test,0.5) )
ecdf(test)(2)
quantile(test,0.5)
ecdf(test)(4)
ecdf(test)(3.99)
200*8
200*8
800/3
15*6
3000*5
200*12*5
2500*5
120/650
140/650
120/650
25*30*20
30*30*20
50*60
80*60
20*720
15000/750
50000/360
bag <- c(1,0,0,0,-1,-2,-2,-3,-5,-2,-2,-5,-5,1)
mean(bag)
140000*3
600000/140000
125*7
875*5
4375/60
875*3
(875*3)/60
40/.3
40/.7
setwd("C:/Users/cdgra/Google Drive/Africa/Nigeria - Farmer-Pastoralist/ecpn_work/analysis/academicPaper/obsDat/analysis")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
# data
load("eventsMedian.Rdata")
load("marketMedian.Rdata")
events <- events[!events[,"farmersPerc_index"] %in% "Inf",] # remove where the indices cannot be calced
# libs
library(dplyr)
library(mosaic)
library(estimatr)
#author: "cdgrady21"
#date: '`r format(Sys.Date(), "%B %d, %Y")`'
# Chunk 2
##analysis with no rand inference.
## using rank because not skewed.
lm_robust(pastoralists_index_rank ~ treatment*time + site + State, data=markets, clusters = site)
#thelm <- lm(pastoralists_index_rank~treatment*time+State+site, data=markets)
##note: lm_robust is same as this but with clustered SEs.
# coef not accounting for site-level or state-level
lm_robust(pastoralists_index_rank ~ treatment*time, data=markets, clusters = site)
# Chunk 3
#Want a true pval from randomization inference.  Would use coin for speed/brevity, but don't know how to account for sites and states in coin's oneway_test, so writing a true pval function.
#To create this null distribution:
#- within state, shuffle TR assignment between sites.
#    - sites within a state are randomly assigned TR or CO
#- within site, shuffle time between observations?
#    - obs within a site are randomly assigned t1 or t2.
#Definitely need to shuffle TR between sites.  Not sure if it makes sense to randomly assign observations as pre/post.  Pretty sure that doesn't make sense, actually, since pre/post are systematically different in ways we did not randomly assign.
#True p-value function.
# shuffle tr between sites
true.fun <- function(var, nsims=5000, dat)
{
thelm <- lm(dat[,var]~treatment*time+State+site, data=dat)
thecoef <-coef(thelm)['treatment:time']
# randomly grab 6 in nas and 4 in ben to be treated
rand.coef = rep(NA,nsims)
for(i in 1:nsims){
rand.nas <- sample(unique(dat$site[dat$State %in% "nasarawa"]), size=6)
rand.ben <- sample(unique(dat$site[dat$State %in% "benue"]), size=4)
rand <- c(as.character(rand.nas), as.character(rand.ben))
rand.samp <- dat
rand.samp[,'treatment'] <- ifelse(rand.samp$site %in% rand, 1, 0)
lm.null <- lm(rand.samp[,var]~treatment*time+State+site, data=rand.samp)
rand.coef[i] <- coef(lm.null)['treatment:time']
}
thep <- mean(rand.coef>=thecoef, na.rm=T)
thedf <- data.frame(coef=thecoef,truep=thep)
rownames(thedf) <- paste0(var, "~","ECPN")
return(thedf)
}
#true.fun(var='pastoralists_index_rank', dat=markets)
tapply(markets$pastoralists_index_rank, markets$site)
tapply(markets$site, markets$pastoralists_index_rank)
tapply(markets$site, markets$pastoralists_index_rank, mean)
tapply(markets$site, markets$pastoralists_index_rank, mean, na.rm=T)
tapply(markets$pastoralists_index_rank, markets$site, mean, na.rm=T)
# high variance between sites
(siteVar <- tapply(markets$pastoralists_index_rank, markets$site, mean, na.rm=T))
sd(siteVar)
summary(siteVar)
summary(markets$pastoralists_index)
summary(markets$pastoralists_index_rank)
summary(markets$pastoralists_index_rankSep)
summary(markets$pastoralists_index_rankSep[markets$time %in% 0])
summary(markets$pastoralists_index_rankSep[markets$time %in% 1])
summary(markets$pastoralists_index[markets$treatment %in% 1, markets$time %in% 0])
summary(markets$pastoralists_index[markets$treatment %in% 1 & markets$time %in% 0])
summary(markets$pastoralists_index[markets$treatment %in% 1 & markets$time %in% 1])
summary(markets$pastoralists_index[markets$treatment %in% 0 & markets$time %in% 0])
summary(markets$pastoralists_index[markets$treatment %in% 0 & markets$time %in% 1])
blah
summary(markets$pastoralists_index_rank[markets$treatment %in% 1, markets$time %in% 0])
summary(markets$pastoralists_index_rank[markets$treatment %in% 1 & markets$time %in% 0])
summary(markets$pastoralists_index_rank[markets$treatment %in% 1 & markets$time %in% 1])
summary(markets$pastoralists_index_rank[markets$treatment %in% 0 & markets$time %in% 0])
summary(markets$pastoralists_index_rank[markets$treatment %in% 0 & markets$time %in% 1])
2000/88
864000/5
