panel.df$rand_outcome_y1 <- rowMeans(panel.df[,grepl("rand_outcome[A-B]_y1$", names(panel.df))], na.rm=T)
panel.df[,c("rand_outcomeA_y0", "rand_outcomeB_y0", "rand_outcomeA_y1", "rand_outcomeB_y1")] <- NULL
# describe relationship -- average prop "yes" at each %outgroup
mosaic::mean(panel.df$rand_outcome_y0~panel.df$treatment, na.rm=T)
mosaic::mean(panel.df$rand_outcome_y0~panel.df$committee, na.rm=T)# no diff by participant/nonpart at baseline
mosaic::mean(panel.df$rand_outcome_y1~panel.df$treatment, na.rm=T)
mosaic::mean(panel.df$rand_outcome_y1~panel.df$committee, na.rm=T)# big diff by part/nonpart at endline
### not due to systematic diffs in condition
mosaic::mean(panel.df$rand_condition_y0~panel.df$treatment, na.rm=T)
mosaic::mean(panel.df$rand_condition_y1~panel.df$treatment, na.rm=T)
# Quick look -- % outgroup actually has no effect on the treatment group at y1, but it does at y0!  AND their baseline is higher.
#estimatr::lm_robust(rand_outcome_y0 ~ rand_condition_y0*treatment, panel.df)
#estimatr::lm_robust(rand_outcome_y1 ~ rand_condition_y1*treatment, panel.df)
# Chunk 15
# get one column that has their outcome/response
panel.df$end_outcome_y0 <- rowSums(panel.df[,grepl("end_exp1[a-z]_y0$", names(panel.df))], na.rm=T)
panel.df$end_outcome_y1 <- rowSums(panel.df[,grepl("end_exp1[a-z]_y1$", names(panel.df))], na.rm=T)
# condition at baseline: 1c is generic, 1a is pastoralists TR, 1b is farmers TR.
panel.df$end_condition_y0 <- ifelse(!is.na(panel.df$end_exp1a_y0), 1,
ifelse(!is.na(panel.df$end_exp1b_y0), 1,
ifelse(!is.na(panel.df$end_exp1c_y0), 0, NA)))
panel.df$end_condition_y1 <- ifelse(!is.na(panel.df$end_exp1a_y1), 1,
ifelse(!is.na(panel.df$end_exp1b_y1), 1,
ifelse(!is.na(panel.df$end_exp1c_y1), 0, NA)))
# Chunk 19
covars <- c('age_y1', 'ethnic2_y1', 'radio_y0', 'radio_y1',
'gender_y1', 'income_month_y0', 'income_month_y1',
'username_y0', 'username_y1', 'duration_y0', 'duration_y1',
"state"
)
#tr resid
panel.df$treatment <- as.numeric(as.character(panel.df$treatment))
tr_fmla<-reformulate(covars, response='treatment')
tr.lm <- lm(tr_fmla,panel.df) # with other controls
lm.tr_resid<-resid(tr.lm)
panel.df[names(lm.tr_resid),"tr_resid"]<-lm.tr_resid
stopifnot(panel.df[8,"tr_resid"]==lm.tr_resid["8"])
#function to resid the other vars.
#####################################################
adj.fun <- function(var)
{
the_fmla <- reformulate (covars, response=var)
the_lm <- lm(the_fmla, panel.df)
the_resids <- resid(the_lm)
panel.df[names(the_resids), paste0(var,"_resid")] <- the_resids
stopifnot(panel.df[8,paste0(var,"_resid")]==the_resids['8'])
return(panel.df[,paste0(var,"_resid")])
}
# Chunk 21
outcomes <- c(names(panel.df)[grepl("index$", names(panel.df))], names(panel.df)[grepl("cw$", names(panel.df))],
'pgp_amount_y1', 'pgp_donate_y1', 'pgp_meanDist_y1',
"bene_index_perc")
# outcome resids...sapply not working
#panel.df[,paste0(outcomes, "_resid")] <- sapply(panel.df[,outcomes], adj.fun)
panel.df[,paste0(outcomes, "_resid")] <- NA
for(i in 1:ncol(panel.df[,paste0(outcomes, "_resid")]))
{
panel.df[,paste0(outcomes, "_resid")[i]] <- adj.fun(paste0(outcomes)[i])
}
# test
# as controls
new_fmla <- reformulate(c('treatment', covars), response="out_index")
lm.con <- lm_robust(new_fmla, data=panel.df, clusters=community)
test1 <- lm.con$coefficients['treatment']
#covar adjusted
(lm.adj <- lm_robust(out_index_resid~tr_resid, data=panel.df, clusters=community))
test2 <- lm.adj$coefficients['tr_resid']
stopifnot(round(test1,8)==round(test2,8)) # R's weird rounding
# Chunk 23
# need to reverse some cols so that HIGH is GOOD for all variables.  For these variables right now, HIGH is BAD.  This makes HIGH GOOD.
## inVars and so all in_index things were reversed in the e-makeIndices file.
revCols <- c("clash_index","clash_cw", "clash_cw_y0", "clash_cw_y1",
"threat_index", "threat_cw", "threat_cw_y0", "threat_cw_y1",
"in_index", "in_cw", "in_cw_y0", "in_cw_y1"#,
#"list_exp", "list_exp_y0", "list_exp_y1"
)
panel.df[,revCols] <- panel.df[,revCols]*-1
## How I was doing it in future rmd files.
#revCols <- c("clash_index", "threatIn_index", "threat_index", "in_index",
#             "clash_cw", "threatIn_cw", "threat_cw", "in_cw"
#             )
#revCols_agg <- c(revCols, paste0(revCols, "_base"), paste0(revCols, "_end"), paste0(revCols, "_resid"))
#ag.df[,revCols_agg] <- ag.df[,revCols_agg]*-1
#revCols_ind <- c(revCols, paste0(revCols, "_y0"), paste0(revCols, "_y1"), paste0(revCols, "_resid"))
#panel.df[,revCols_ind] <- panel.df[,revCols_ind]*-1
#rm(list=ls(pattern="revCols"))
# Chunk 24
allIndices <- c("x_cw", "cohes_cw", "pgp_amount_y1",
"pgp_donate_y1", "contactOnly_cw", "in_cw",
"resolve_cw")
allIndices1 <- c("x_cw", "cohes_cw", "pgp_amount_y1",
"pgp_donate_y1", "contactOnly_cw") # we did not list hypotheses about insecurity or dispute resolution at panel level.
ic2.fun <- function(vars)
{
x <- panel.df[,vars]
x <- zoo::na.aggregate(x)
out_cw <- icwIndex(x)
print(cor(x))
print(out_cw$weights)
return(as.vector(out_cw$index))
}
panel.df$all_cw <- ic2.fun(allIndices)
panel.df$all1_cw <- ic2.fun(allIndices1)
# no pgg
panel.df$all2_cw <- ic2.fun(allIndices[-c(3,4)])
panel.df$all3_cw <- ic2.fun(allIndices1[-c(3,4)])
# Chunk 25
rm(list=ls(pattern="(^new|thing|^need|^test|new_fmla$|lm)"))
rm(list=ls(pattern="(base|end|^df)"))
rm(i)
save.image(file="f2-panelData.Rdata")
# Chunk 26
weirdAge <- panel.df[abs(panel.df$age)>20, c('age_y0', 'age_y1', 'treatment', 'committee')]
table(weirdAge$treatment)
table(weirdAge$committee)
setwd("C:/Users/chris/Google Drive/Africa/Nigeria - Farmer-Pastoralist/ecpn_work/analysis/academicPaper/survey/c_creating_dataframes")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
load("../b_creating_outcomes/d-additiveIndices.Rdata")
load("../b_creating_outcomes/rand_df.Rdata")
library(plyr)
library(dplyr)
library(estimatr)
# Chunk 2
# stuff from above that needs to be run because above is now eval=F
possCovars <- c('age', 'ethnic2', 'radio',
'gender', 'income_month',
'username', 'duration',
"state"
)
rand.df$age <- as.numeric(as.character(rand.df$age))
# fix/make numeric variables
rand.df$ethnic2 <- as.factor(rand.df$ethnic2)
rand.df <- cbind(rand.df,model.matrix(~ . + 0, data=rand.df['ethnic2'], contrasts.arg = lapply(rand.df['ethnic2'], contrasts, contrasts=FALSE))) #
rand.df$psu <- as.numeric(as.character(rand.df$psu)) #for aggregation we want psu as a number
rand.df$female <- ifelse(rand.df$gender %in% "female", 1, 0)
possCovars <- c(possCovars[!possCovars %in% c("ethnic2", "username", "gender", "state")], "female")
# aggregate vars
listVars <- ls(pattern="Vars") # there is a way to do this just from this list of values, but idk how offhand.
expVars <- names(rand.df)[grepl("^(...|....)_(exp[0-9])|^rand_", names(rand.df))]
pgpVars <- names(rand.df)[grepl("pgp", names(rand.df))]
ag.vars <- unique(c(names(rand.df)[grepl("index", names(rand.df))],
names(rand.df)[grepl("cw", names(rand.df))],
allTrustVars, beneVars, bargVars, clashVars,
cohesVars, contactVars, conVioEffVars, dispVars,
disVars, otherVars, vioVars, threatVars, vioExpVars,
expVars, pgpVars, perspVars,
'treatment', 'community', 'survey', "psu", #"tr_resid",
possCovars,
names(rand.df)[grepl("ethnic2[a-z]", names(rand.df))]))
ag1 <- aggregate(rand.df[rand.df$survey %in% 0,ag.vars], by=list(comm=rand.df[rand.df$survey %in% 0,ag.vars]$community), mean,na.rm=T)
ag2 <- aggregate(rand.df[rand.df$survey %in% 1,ag.vars], by=list(comm=rand.df[rand.df$survey %in% 1,ag.vars]$community), mean,na.rm=T)
# warnings because "community" is factor and cannot be aggregated by itself...
stopifnot(names(ag1)==names(ag2))
names(ag1) <- paste0(names(ag1),"_base")
names(ag2) <- paste0(names(ag2),"_end")
# Chunk 3
ag2[, c('treatment_end','psu_end', "comm_end")] <- NULL # remove things from ag2 that are also in ag1 so no useless duplicates
ag.df<-as.data.frame(cbind(ag1,ag2))
ag.df$state <- rand.df$state[match(ag.df$comm_base,rand.df$community)]
ag.df$clash_index_end[is.na(ag.df$clash_in)] # if there is an NA in clash_index (no one even knew about conflict), make it 0
stopifnot(mean(ag.df$clash_index_base)==mean(ag1$clash_index_base, na.rm=T))
stopifnot(mean(ag.df$clash_index_end)==mean(ag2$clash_index_end, na.rm=T))
names(ag.df)[names(ag.df) %in% c("comm_base", "treatment_base", "psu_base")] <- c("comm", "treatment","psu" )
ag.df[,grepl("(survey|community)", names(ag.df))] <- NULL
rm(ag1); rm(ag2)
# Chunk 4
## re-scale before DiD outcome.  It puts both baseline and endline on 0-1, then asks about movement on that 0-1.  Otherwise, max score at baseline/endline would look like a big change when they are supposed to be the same thing.
icVars <- names(ag.df)[grepl("_cw", names(ag.df))]
ag.df[,icVars] <- reshape::rescaler(ag.df[,icVars],type="range")
ag.df[,icVars] <- reshape::rescaler(ag.df[,icVars],type="range")
# Chunk 5
# list exp
ag.df$list_exp_base <- ag.df$list_exp1b_base - ag.df$list_exp1a_base
ag.df$list_exp_end <- ag.df$list_exp1b_end - ag.df$list_exp1a_end
ag.df[,names(ag.df)[grepl("list_exp1(a|b)", names(ag.df))]] <- NULL
# end_exp: 1a goes to pastoralists, 1b goes to farmer's, 1c is generic.
ag.df$end_expTR_end <- ifelse(is.na(ag.df$end_exp1a_end), ag.df$end_exp1b_end, ag.df$end_exp1a_end)
ag.df$end_expTR_base <- ifelse(is.na(ag.df$end_exp1a_base), ag.df$end_exp1b_base, ag.df$end_exp1a_base)
ag.df$end_exp_end <- ag.df$end_expTR_end - ag.df$end_exp1c_end
ag.df$end_exp_base <- ag.df$end_expTR_base - ag.df$end_exp1c_base
#ag.df[,c("comm",names(ag.df)[grepl("end_exp", names(ag.df))])]
ag.df[,names(ag.df)[grepl("end_exp1(a|b)", names(ag.df))]] <- NULL
# Chunk 6
ag.df[,sub("_end$", "", names(ag.df)[grepl("_end$",names(ag.df))])] <- ag.df[,grepl("_end", names(ag.df))] - ag.df[,grepl("_base", names(ag.df))]
# test that worked right
ag.df$test <- ag.df$cohes_index_end - ag.df$cohes_index_base
stopifnot(ag.df$test==ag.df$cohes_index)
ag.df$test <- ag.df$list_exp_end - ag.df$list_exp_base
stopifnot(ag.df$test==ag.df$list_exp)
ag.df$test <- NULL
# pgp is only at endline, so remove pgp base vars
ag.df[,names(ag.df)[grepl("(pgp_.*_base|pgp_[[:alpha:]]*$)", names(ag.df))]] <- NULL
# Chunk 7
# aggregate to treatment/condition level, outcomes are (1) % who say yes in each condition at BASELINE and (2) the % who says yes in each condition at ENDLINE.
table(rand.df$rand_condition, exclude=c())
rand.df <- rand.df[!is.na(rand.df$rand_condition),]
new.df <- rand.df %>%
select(treatment,survey, community, rand_outcome, rand_condition, state, psu) %>%
dplyr::group_by(community, treatment, rand_condition, state, psu) %>%
dplyr::summarise(randOut_end=mean(rand_outcome[survey %in% 1], na.rm=T),
randOut_base=mean(rand_outcome[survey %in% 0]),
randOut=randOut_end-randOut_base) %>%
as.data.frame()
#summary(lm(randOut~treatment+factor(rand_condition)+state, new.df))
# looks right, now to make it a randomization test
#####
# But how to do this in a way that lets me easily test it with NPC?  Not possible now, diff datasets.  Maybe if we collapse this into a comm-level with columns for: (1) increase at 5%, (2) increase at 25%, (3) increase at 50%, (4) increase at 75%, and (5) average increase.  Can then merge/cbind with ag.df.  Will be functionally identical to above, but at ag.df level!
####
merge.df <- new.df %>% dplyr::group_by(community) %>%
summarise(r5=randOut[rand_condition %in% 5],
r25=randOut[rand_condition %in% 25],
r50=randOut[rand_condition %in% 50],
r75=randOut[rand_condition %in% 75],
r5_base=randOut_base[rand_condition %in% 5],
r25_base=randOut_base[rand_condition %in% 25],
r50_base=randOut_base[rand_condition %in% 50],
r75_base=randOut_base[rand_condition %in% 75],
r5_end=randOut_end[rand_condition %in% 5],
r25_end=randOut_end[rand_condition %in% 25],
r50_end=randOut_end[rand_condition %in% 50],
r75_end=randOut_end[rand_condition %in% 75]
) %>%
as.data.frame()
merge.df$rMean <- rowMeans(merge.df[c('r5','r25','r50','r75')])
merge.df$rMean_base <- rowMeans(merge.df[c('r5_base','r25_base','r50_base','r75_base')])
merge.df$rMean_end <- rowMeans(merge.df[c('r5_end','r25_end','r50_end','r75_end')])
ag.df <- merge(ag.df, merge.df, all=T, by.x="comm", by.y="community")
rm(new.df)
rm(merge.df)
# Chunk 8
ag.df$psu <- as.factor(as.character(ag.df$psu))
# need to reverse some cols so that HIGH is GOOD for all variables.  For these variables right now, HIGH is BAD.  This makes HIGH GOOD.
revCols <- c("clash_index", "clash_cw", "clash_cw_base", "clash_cw_end",
"threat_index", "threat_cw", "threat_cw_base", "threat_cw_end",
"in_index", "in_cw", "in_cw_base", "in_cw_end",
"list_exp", "list_exp_base", "list_exp_end")
ag.df[,revCols] <- ag.df[,revCols]*-1
# Chunk 9
allIndices <- c("x_cw", "cohes_cw", "pgp_amount_end",
"pgp_donate_end", "contactOnly_cw", "in_cw",
"resolve_cw", "list_exp", "rMean", "end_exp")
# chris: if we are comfortable, could replace rand_lm with rMean, the diff outcome of the rando_exp.  Or add it.
matStand <- function(x, sgroup = rep(TRUE, nrow(x))){
for(j in 1:ncol(x)){
x[,j] <- (x[,j] - mean(x[sgroup,j]))/sd(x[sgroup,j])
}
return(x)
}
icwIndex <- function(	xmat,
wgts=rep(1, nrow(xmat)),
revcols = NULL,
sgroup = rep(TRUE, nrow(xmat))){
X <- matStand(xmat, sgroup)
if(length(revcols)>0){
X[,revcols] <-  -1*X[,revcols]
}
i.vec <- as.matrix(rep(1,ncol(xmat)))
Sx <- cov.wt(X, wt=wgts)[[1]]
weights <- solve(t(i.vec)%*%solve(Sx)%*%i.vec)%*%t(i.vec)%*%solve(Sx)
index <- t(solve(t(i.vec)%*%solve(Sx)%*%i.vec)%*%t(i.vec)%*%solve(Sx)%*%t(X))
return(list(weights = weights, index = index))
}
ag.df$control <- ifelse(ag.df$treatment == 1, 0, 1)
ic2.fun <- function(vars)
{
x <- ag.df[,vars]
x <- zoo::na.aggregate(x)
out_cw <- icwIndex(xmat=x, sgroup=as.logical(ag.df$control))
print(cor(x))
print(out_cw$weights)
return(as.vector(out_cw$index))
}
baseIndices <- c(paste0(allIndices[grepl("cw", allIndices)], "_base"), allIndices[!grepl("cw", allIndices)])
endIndices <- sub("_base", "_end", baseIndices)
ag.df$all_cw_base <- reshape::rescaler(ic2.fun(baseIndices), type="sd")
ag.df$all_cw_end <- reshape::rescaler(ic2.fun(endIndices), type="sd")
ag.df$all_cw <- ag.df$all_cw_end-ag.df$all_cw_base
# no pgg
ag.df$all2_cw <- ic2.fun(allIndices[-c(3,4)])
# Chunk 10
rankCols <- c(names(ag.df)[grepl("_cw", names(ag.df))],
"pgp_amount_end", "pgp_donate_end",
'list_exp', 'rMean', 'end_exp') # still more outcomes than I care about, but that's okay
ag.df[,paste0(rankCols, "_rank")] <- sapply(ag.df[,rankCols], rank)
# Chunk 11
save(rand.df, file="rand_df.Rdata")
rm(list=ls(pattern="(rand|base|end|^df|^i$|^lm|lm$|new_fmla|test)"))
save.image(file="f-aggregateComms_ap.Rdata")
setwd("C:/Users/chris/Google Drive/Africa/Nigeria - Farmer-Pastoralist/ecpn_work/analysis/academicPaper/survey/c_creating_dataframes")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
load("../b_creating_outcomes/d-additiveIndices.Rdata")
load("../b_creating_outcomes/rand_df.Rdata")
library(plyr)
library(dplyr)
library(estimatr)
# stuff from above that needs to be run because above is now eval=F
possCovars <- c('age', 'ethnic2', 'radio',
'gender', 'income_month',
'username', 'duration',
"state"
)
rand.df$age <- as.numeric(as.character(rand.df$age))
# fix/make numeric variables
rand.df$ethnic2 <- as.factor(rand.df$ethnic2)
rand.df <- cbind(rand.df,model.matrix(~ . + 0, data=rand.df['ethnic2'], contrasts.arg = lapply(rand.df['ethnic2'], contrasts, contrasts=FALSE))) #
rand.df$psu <- as.numeric(as.character(rand.df$psu)) #for aggregation we want psu as a number
rand.df$female <- ifelse(rand.df$gender %in% "female", 1, 0)
possCovars <- c(possCovars[!possCovars %in% c("ethnic2", "username", "gender", "state")], "female")
# aggregate vars
listVars <- ls(pattern="Vars") # there is a way to do this just from this list of values, but idk how offhand.
expVars <- names(rand.df)[grepl("^(...|....)_(exp[0-9])|^rand_", names(rand.df))]
pgpVars <- names(rand.df)[grepl("pgp", names(rand.df))]
ag.vars <- unique(c(names(rand.df)[grepl("index", names(rand.df))],
names(rand.df)[grepl("cw", names(rand.df))],
allTrustVars, beneVars, bargVars, clashVars,
cohesVars, contactVars, conVioEffVars, dispVars,
disVars, otherVars, vioVars, threatVars, vioExpVars,
expVars, pgpVars, perspVars,
'treatment', 'community', 'survey', "psu", #"tr_resid",
possCovars,
names(rand.df)[grepl("ethnic2[a-z]", names(rand.df))]))
ag1 <- aggregate(rand.df[rand.df$survey %in% 0,ag.vars], by=list(comm=rand.df[rand.df$survey %in% 0,ag.vars]$community), mean,na.rm=T)
ag2 <- aggregate(rand.df[rand.df$survey %in% 1,ag.vars], by=list(comm=rand.df[rand.df$survey %in% 1,ag.vars]$community), mean,na.rm=T)
# warnings because "community" is factor and cannot be aggregated by itself...
stopifnot(names(ag1)==names(ag2))
names(ag1) <- paste0(names(ag1),"_base")
names(ag2) <- paste0(names(ag2),"_end")
ag2[, c('treatment_end','psu_end', "comm_end")] <- NULL # remove things from ag2 that are also in ag1 so no useless duplicates
ag.df<-as.data.frame(cbind(ag1,ag2))
ag.df$state <- rand.df$state[match(ag.df$comm_base,rand.df$community)]
ag.df$clash_index_end[is.na(ag.df$clash_in)] # if there is an NA in clash_index (no one even knew about conflict), make it 0
stopifnot(mean(ag.df$clash_index_base)==mean(ag1$clash_index_base, na.rm=T))
stopifnot(mean(ag.df$clash_index_end)==mean(ag2$clash_index_end, na.rm=T))
names(ag.df)[names(ag.df) %in% c("comm_base", "treatment_base", "psu_base")] <- c("comm", "treatment","psu" )
ag.df[,grepl("(survey|community)", names(ag.df))] <- NULL
rm(ag1); rm(ag2)
## re-scale before DiD outcome.  It puts both baseline and endline on 0-1, then asks about movement on that 0-1.  Otherwise, max score at baseline/endline would look like a big change when they are supposed to be the same thing.
icVars <- names(ag.df)[grepl("_cw", names(ag.df))]
ag.df[,icVars] <- reshape::rescaler(ag.df[,icVars],type="range")
ag.df[,icVars] <- reshape::rescaler(ag.df[,icVars],type="range")
# list exp
ag.df$list_exp_base <- ag.df$list_exp1b_base - ag.df$list_exp1a_base
ag.df$list_exp_end <- ag.df$list_exp1b_end - ag.df$list_exp1a_end
ag.df[,names(ag.df)[grepl("list_exp1(a|b)", names(ag.df))]] <- NULL
# end_exp: 1a goes to pastoralists, 1b goes to farmer's, 1c is generic.
ag.df$end_expTR_end <- ifelse(is.na(ag.df$end_exp1a_end), ag.df$end_exp1b_end, ag.df$end_exp1a_end)
ag.df$end_expTR_base <- ifelse(is.na(ag.df$end_exp1a_base), ag.df$end_exp1b_base, ag.df$end_exp1a_base)
ag.df$end_exp_end <- ag.df$end_expTR_end - ag.df$end_exp1c_end
ag.df$end_exp_base <- ag.df$end_expTR_base - ag.df$end_exp1c_base
#ag.df[,c("comm",names(ag.df)[grepl("end_exp", names(ag.df))])]
ag.df[,names(ag.df)[grepl("end_exp1(a|b)", names(ag.df))]] <- NULL
ag.df[,sub("_end$", "", names(ag.df)[grepl("_end$",names(ag.df))])] <- ag.df[,grepl("_end", names(ag.df))] - ag.df[,grepl("_base", names(ag.df))]
# test that worked right
ag.df$test <- ag.df$cohes_index_end - ag.df$cohes_index_base
stopifnot(ag.df$test==ag.df$cohes_index)
ag.df$test <- ag.df$list_exp_end - ag.df$list_exp_base
stopifnot(ag.df$test==ag.df$list_exp)
ag.df$test <- NULL
# pgp is only at endline, so remove pgp base vars
ag.df[,names(ag.df)[grepl("(pgp_.*_base|pgp_[[:alpha:]]*$)", names(ag.df))]] <- NULL
# aggregate to treatment/condition level, outcomes are (1) % who say yes in each condition at BASELINE and (2) the % who says yes in each condition at ENDLINE.
table(rand.df$rand_condition, exclude=c())
rand.df <- rand.df[!is.na(rand.df$rand_condition),]
new.df <- rand.df %>%
select(treatment,survey, community, rand_outcome, rand_condition, state, psu) %>%
dplyr::group_by(community, treatment, rand_condition, state, psu) %>%
dplyr::summarise(randOut_end=mean(rand_outcome[survey %in% 1], na.rm=T),
randOut_base=mean(rand_outcome[survey %in% 0]),
randOut=randOut_end-randOut_base) %>%
as.data.frame()
#summary(lm(randOut~treatment+factor(rand_condition)+state, new.df))
# looks right, now to make it a randomization test
#####
# But how to do this in a way that lets me easily test it with NPC?  Not possible now, diff datasets.  Maybe if we collapse this into a comm-level with columns for: (1) increase at 5%, (2) increase at 25%, (3) increase at 50%, (4) increase at 75%, and (5) average increase.  Can then merge/cbind with ag.df.  Will be functionally identical to above, but at ag.df level!
####
merge.df <- new.df %>% dplyr::group_by(community) %>%
summarise(r5=randOut[rand_condition %in% 5],
r25=randOut[rand_condition %in% 25],
r50=randOut[rand_condition %in% 50],
r75=randOut[rand_condition %in% 75],
r5_base=randOut_base[rand_condition %in% 5],
r25_base=randOut_base[rand_condition %in% 25],
r50_base=randOut_base[rand_condition %in% 50],
r75_base=randOut_base[rand_condition %in% 75],
r5_end=randOut_end[rand_condition %in% 5],
r25_end=randOut_end[rand_condition %in% 25],
r50_end=randOut_end[rand_condition %in% 50],
r75_end=randOut_end[rand_condition %in% 75]
) %>%
as.data.frame()
merge.df$rMean <- rowMeans(merge.df[c('r5','r25','r50','r75')])
merge.df$rMean_base <- rowMeans(merge.df[c('r5_base','r25_base','r50_base','r75_base')])
merge.df$rMean_end <- rowMeans(merge.df[c('r5_end','r25_end','r50_end','r75_end')])
ag.df <- merge(ag.df, merge.df, all=T, by.x="comm", by.y="community")
rm(new.df)
rm(merge.df)
ag.df$comm
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
load("../b_creating_outcomes/d-additiveIndices.Rdata")
load("../b_creating_outcomes/rand_df.Rdata")
library(plyr)
library(dplyr)
library(estimatr)
# Chunk 2
# stuff from above that needs to be run because above is now eval=F
possCovars <- c('age', 'ethnic2', 'radio',
'gender', 'income_month',
'username', 'duration',
"state"
)
rand.df$age <- as.numeric(as.character(rand.df$age))
# fix/make numeric variables
rand.df$ethnic2 <- as.factor(rand.df$ethnic2)
rand.df <- cbind(rand.df,model.matrix(~ . + 0, data=rand.df['ethnic2'], contrasts.arg = lapply(rand.df['ethnic2'], contrasts, contrasts=FALSE))) #
rand.df$psu <- as.numeric(as.character(rand.df$psu)) #for aggregation we want psu as a number
rand.df$female <- ifelse(rand.df$gender %in% "female", 1, 0)
possCovars <- c(possCovars[!possCovars %in% c("ethnic2", "username", "gender", "state")], "female")
# aggregate vars
listVars <- ls(pattern="Vars") # there is a way to do this just from this list of values, but idk how offhand.
expVars <- names(rand.df)[grepl("^(...|....)_(exp[0-9])|^rand_", names(rand.df))]
pgpVars <- names(rand.df)[grepl("pgp", names(rand.df))]
ag.vars <- unique(c(names(rand.df)[grepl("index", names(rand.df))],
names(rand.df)[grepl("cw", names(rand.df))],
allTrustVars, beneVars, bargVars, clashVars,
cohesVars, contactVars, conVioEffVars, dispVars,
disVars, otherVars, vioVars, threatVars, vioExpVars,
expVars, pgpVars, perspVars,
'treatment', 'community', 'survey', "psu", #"tr_resid",
possCovars,
names(rand.df)[grepl("ethnic2[a-z]", names(rand.df))]))
ag1 <- aggregate(rand.df[rand.df$survey %in% 0,ag.vars], by=list(comm=rand.df[rand.df$survey %in% 0,ag.vars]$community), mean,na.rm=T)
ag2 <- aggregate(rand.df[rand.df$survey %in% 1,ag.vars], by=list(comm=rand.df[rand.df$survey %in% 1,ag.vars]$community), mean,na.rm=T)
# warnings because "community" is factor and cannot be aggregated by itself...
stopifnot(names(ag1)==names(ag2))
names(ag1) <- paste0(names(ag1),"_base")
names(ag2) <- paste0(names(ag2),"_end")
# Chunk 3
ag2[, c('treatment_end','psu_end', "comm_end")] <- NULL # remove things from ag2 that are also in ag1 so no useless duplicates
ag.df<-as.data.frame(cbind(ag1,ag2))
ag.df$state <- rand.df$state[match(ag.df$comm_base,rand.df$community)]
ag.df$clash_index_end[is.na(ag.df$clash_in)] # if there is an NA in clash_index (no one even knew about conflict), make it 0
stopifnot(mean(ag.df$clash_index_base)==mean(ag1$clash_index_base, na.rm=T))
stopifnot(mean(ag.df$clash_index_end)==mean(ag2$clash_index_end, na.rm=T))
names(ag.df)[names(ag.df) %in% c("comm_base", "treatment_base", "psu_base")] <- c("comm", "treatment","psu" )
ag.df[,grepl("(survey|community)", names(ag.df))] <- NULL
rm(ag1); rm(ag2)
# Chunk 4
## re-scale before DiD outcome.  It puts both baseline and endline on 0-1, then asks about movement on that 0-1.  Otherwise, max score at baseline/endline would look like a big change when they are supposed to be the same thing.
icVars <- names(ag.df)[grepl("_cw", names(ag.df))]
ag.df[,icVars] <- reshape::rescaler(ag.df[,icVars],type="range")
ag.df[,icVars] <- reshape::rescaler(ag.df[,icVars],type="range")
# Chunk 5
# list exp
ag.df$list_exp_base <- ag.df$list_exp1b_base - ag.df$list_exp1a_base
ag.df$list_exp_end <- ag.df$list_exp1b_end - ag.df$list_exp1a_end
ag.df[,names(ag.df)[grepl("list_exp1(a|b)", names(ag.df))]] <- NULL
# end_exp: 1a goes to pastoralists, 1b goes to farmer's, 1c is generic.
ag.df$end_expTR_end <- ifelse(is.na(ag.df$end_exp1a_end), ag.df$end_exp1b_end, ag.df$end_exp1a_end)
ag.df$end_expTR_base <- ifelse(is.na(ag.df$end_exp1a_base), ag.df$end_exp1b_base, ag.df$end_exp1a_base)
ag.df$end_exp_end <- ag.df$end_expTR_end - ag.df$end_exp1c_end
ag.df$end_exp_base <- ag.df$end_expTR_base - ag.df$end_exp1c_base
#ag.df[,c("comm",names(ag.df)[grepl("end_exp", names(ag.df))])]
ag.df[,names(ag.df)[grepl("end_exp1(a|b)", names(ag.df))]] <- NULL
# Chunk 6
ag.df[,sub("_end$", "", names(ag.df)[grepl("_end$",names(ag.df))])] <- ag.df[,grepl("_end", names(ag.df))] - ag.df[,grepl("_base", names(ag.df))]
# test that worked right
ag.df$test <- ag.df$cohes_index_end - ag.df$cohes_index_base
stopifnot(ag.df$test==ag.df$cohes_index)
ag.df$test <- ag.df$list_exp_end - ag.df$list_exp_base
stopifnot(ag.df$test==ag.df$list_exp)
ag.df$test <- NULL
# pgp is only at endline, so remove pgp base vars
ag.df[,names(ag.df)[grepl("(pgp_.*_base|pgp_[[:alpha:]]*$)", names(ag.df))]] <- NULL
# aggregate to treatment/condition level, outcomes are (1) % who say yes in each condition at BASELINE and (2) the % who says yes in each condition at ENDLINE.
table(rand.df$rand_condition, exclude=c())
rand.df <- rand.df[!is.na(rand.df$rand_condition),]
new.df <- rand.df %>%
select(treatment,survey, community, rand_outcome, rand_condition, state, psu) %>%
dplyr::group_by(community, treatment, rand_condition, state, psu) %>%
dplyr::summarise(randOut_end=mean(rand_outcome[survey %in% 1], na.rm=T),
randOut_base=mean(rand_outcome[survey %in% 0]),
randOut=randOut_end-randOut_base) %>%
as.data.frame()
#####
# But how to do this in a way that lets me easily test it with NPC?  Not possible now, diff datasets.  Maybe if we collapse this into a comm-level with columns for: (1) increase at 5%, (2) increase at 25%, (3) increase at 50%, (4) increase at 75%, and (5) average increase.  Can then merge/cbind with ag.df.  Will be functionally identical to above, but at ag.df level!
####
merge.df <- new.df %>% dplyr::group_by(community) %>%
summarise(r5=randOut[rand_condition %in% 5],
r25=randOut[rand_condition %in% 25],
r50=randOut[rand_condition %in% 50],
r75=randOut[rand_condition %in% 75],
r5_base=randOut_base[rand_condition %in% 5],
r25_base=randOut_base[rand_condition %in% 25],
r50_base=randOut_base[rand_condition %in% 50],
r75_base=randOut_base[rand_condition %in% 75],
r5_end=randOut_end[rand_condition %in% 5],
r25_end=randOut_end[rand_condition %in% 25],
r50_end=randOut_end[rand_condition %in% 50],
r75_end=randOut_end[rand_condition %in% 75]
) %>%
as.data.frame()
merge.df$rMean <- rowMeans(merge.df[c('r5','r25','r50','r75')])
merge.df$rMean_base <- rowMeans(merge.df[c('r5_base','r25_base','r50_base','r75_base')])
merge.df$rMean_end <- rowMeans(merge.df[c('r5_end','r25_end','r50_end','r75_end')])
ag.df <- merge(ag.df, merge.df, all=T, by.x="comm", by.y="community")
new.df$community
merge.df
