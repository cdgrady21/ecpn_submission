(mark_pasts <- true.fun(var='pastoralists_index_rank', dat=markets))
(mark_pasts <- true.fun(var='pastoralists_index_rank', dat=markets))
markets[, c("State", "site", "treatment", "time",
"month_num", "date",
"attend_total", "attend_farm", "attend_past",
"eat_total", "eat_farm", "eat_past",
"farmers_index", "pastoralists_index")]
rankOutcomes
names(markets)
paste(c(farm,past), collapse = |)
paste("farm","past", collapse = "|")
paste(c(farm,past), collapse = "|")
paste(c("farm","past"), collapse = "|")
names(markets)[grepl(paste(c("farm","past"), collapse = "|"), names(markets))]
paste(c("farm","past"), collapse = "|")
names(markets)[grepl("farm|past", names(markets))]
markets.df <- markets[, c("State", "site", "treatment", "time",
"month_num", "date",
names(markets)[grepl("farm|past", names(markets))])]
# at site-level and month-level
markets.df1 <- markets.df %>%
dplyr::group_by(site,month_num) %>%
dplyr::summarise_all(funs(mean(., na.rm = TRUE))) %>%
as.data.frame()
warnings()
#for now fix this way; later don't summarise_all this column
markets.df1$treatment <- as.factor(as.character(markets.df1$treatment))
markets.df1
## sort by site and month_num
markets.df1 <- markets.df1[order(markets.df1$site, markets.df1$month_num),]
markets[order(markets$site, markets$month_num), c("site", "month_num", "attend_total", "Observer.Name")
]
markets[order(markets$site, markets$month_num), c("site", "month_num")]
# at tr/co-level and month-level
markets.df2 <- markets.df %>%
dplyr::group_by(treatment,month_num) %>%
dplyr::summarise_all(funs(mean(., na.rm = TRUE))) %>%
as.data.frame()
warnings()
markets.df2$treatment <- as.factor(as.character(markets.df2$treatment))
# at site-level & t1/t2-level
markets.df1b <- markets.df %>%
dplyr::group_by(site,time) %>%
dplyr::summarise_all(funs(mean(., na.rm = TRUE))) %>%
as.data.frame()
markets.df1b$treatment <- as.factor(as.character(markets.df1b$treatment))
# at tr/co-level & t1/t2-level
markets.df2b <- markets.df %>%
dplyr::group_by(treatment,time) %>%
dplyr::summarise_all(funs(mean(., na.rm = TRUE))) %>%
as.data.frame()
markets.df2b$treatment <- as.factor(as.character(markets.df2b$treatment))
ggplot(data=markets.df2, aes(x=markets.df2[['month_num']], y=events.df2[['pastoralists_index_rank']], group=treatment)) +
geom_line(aes(color=treatment))+
geom_point(aes(color=treatment))+
geom_vline(xintercept=8)+
#coord_cartesian(ylim = c(ymin, ymax)) +
ggtitle("title") +
theme_bw() +
theme(panel.grid.major = element_blank()) +
theme(plot.title = element_text(size=18)) +
xlab("xlab") +
ylab("ylab")
ggplot(data=markets.df2, aes(x=markets.df2[['month_num']], y=markets.df2[['pastoralists_index_rank']], group=treatment)) +
geom_line(aes(color=treatment))+
geom_point(aes(color=treatment))+
geom_vline(xintercept=8)+
#coord_cartesian(ylim = c(ymin, ymax)) +
ggtitle("title") +
theme_bw() +
theme(panel.grid.major = element_blank()) +
theme(plot.title = element_text(size=18)) +
xlab("xlab") +
ylab("ylab")
mean(1:10)
mean(1+3+5+7=9)
mean(1+3+5+7+9)
mean(c(1,3,5,7,9))
mean(c(2,4,6,8,10))
mean(1:5)
mean(6:10)
mean(c(3,8))
plot.fun<-function(outcome, thedf, time, grp, title, xlab, ylab, ymin, ymax){
ggplot(data=thedf, aes(x=thedf[[time]], y=thedf[[outcome]], group=grp)) +
geom_line(aes(color=treatment))+
geom_point(aes(color=treatment))+
coord_cartesian(ylim = c(ymin, ymax)) +
geom_vline(xintercept=8) +
ggtitle(title) +
theme_bw() +
theme(panel.grid.major = element_blank()) +
theme(plot.title = element_text(size=18)) +
xlab(xlab) +
ylab(ylab)
}
plot.fun(outcome='pastoralists_index_rank', thedf=markets.df2,
time='month_num',
grp='treatment', title="Past Index by Month in TR and CO",
xlab="Month", ylab="Index",
ymin=0, ymax=35)
plot.fun(outcome='pastoralists_index_rank', thedf=markets.df2,
time='month_num',
grp='treatment', title="Past Index by Month in TR and CO",
xlab="Month", ylab="Index",
ymin=0, ymax=35)
## manual plot to be function-ized
ggplot(data=markets.df2, aes(x=markets.df2[['month_num']], y=markets.df2[['pastoralists_index_rank']], group=site)) +
geom_line(aes(color=treatment))+
geom_point(aes(color=treatment))+
geom_vline(xintercept=8)+
#coord_cartesian(ylim = c(ymin, ymax)) +
ggtitle("title") +
theme_bw() +
theme(panel.grid.major = element_blank()) +
theme(plot.title = element_text(size=18)) +
xlab("xlab") +
ylab("ylab")
## manual plot to be functionized
ggplot(data=markets.df2, aes(x=jitter(markets.df2[['month_num']]), y=markets.df2[['pastoralists_index_rank']], group=treatment)) +
geom_line(aes(color=treatment))+
geom_point(aes(color=treatment))+
geom_vline(xintercept=8)+
#coord_cartesian(ylim = c(ymin, ymax)) +
ggtitle("title") +
theme_bw() +
theme(panel.grid.major = element_blank()) +
theme(plot.title = element_text(size=18)) +
xlab("xlab") +
ylab("ylab")
## manual plot to be functionized
ggplot(data=markets.df2, aes(x=jitter(markets.df2[['month_num']]), y=markets.df2[['pastoralists_index_rank']], group=site)) +
geom_line(aes(color=treatment))+
geom_point(aes(color=treatment))+
geom_vline(xintercept=8)+
#coord_cartesian(ylim = c(ymin, ymax)) +
ggtitle("title") +
theme_bw() +
theme(panel.grid.major = element_blank()) +
theme(plot.title = element_text(size=18)) +
xlab("xlab") +
ylab("ylab")
## manual plot to be functionized
ggplot(data=markets.df2, aes(x=markets.df2[['month_num']], y=markets.df2[['pastoralists_index_rank']], group=treatment)) +
geom_line(aes(color=treatment))+
geom_point(aes(color=treatment))+
geom_vline(xintercept=8)+
#coord_cartesian(ylim = c(ymin, ymax)) +
ggtitle("title") +
theme_bw() +
theme(panel.grid.major = element_blank()) +
theme(plot.title = element_text(size=18)) +
xlab("xlab") +
ylab("ylab")
## manual plot to be functionized
ggplot(data=markets.df2, aes(x=markets.df2[['time']], y=markets.df2[['pastoralists_index_rank']], group=treatment)) +
geom_line(aes(color=treatment))+
geom_point(aes(color=treatment))+
geom_vline(xintercept=8)+
#coord_cartesian(ylim = c(ymin, ymax)) +
ggtitle("title") +
theme_bw() +
theme(panel.grid.major = element_blank()) +
theme(plot.title = element_text(size=18)) +
xlab("xlab") +
ylab("ylab")
dim(markets.df2)
## manual plot to be functionized
ggplot(data=markets.df1, aes(x=markets.df2[['month_num']], y=markets.df2[['pastoralists_index_rank']], group=treatment)) +
geom_line(aes(color=treatment))+
geom_point(aes(color=treatment))+
geom_vline(xintercept=8)+
#coord_cartesian(ylim = c(ymin, ymax)) +
ggtitle("title") +
theme_bw() +
theme(panel.grid.major = element_blank()) +
theme(plot.title = element_text(size=18)) +
xlab("xlab") +
ylab("ylab")
## manual plot to be functionized
### markets.df1 == site-level, month-level
### markets.df2b == tr/co-level, t1/t2-level.
ggplot(data=markets.df1, aes(x=markets.df2[['month_num']], y=markets.df2[['pastoralists_index_rank']], group=site)) +
geom_line(aes(color=treatment))+
geom_point(aes(color=treatment))+
geom_vline(xintercept=8)+
#coord_cartesian(ylim = c(ymin, ymax)) +
ggtitle("title") +
theme_bw() +
theme(panel.grid.major = element_blank()) +
theme(plot.title = element_text(size=18)) +
xlab("xlab") +
ylab("ylab")
## manual plot to be functionized
### markets.df1 == site-level, month-level
### markets.df2b == tr/co-level, t1/t2-level.
ggplot(data=markets.df1, aes(x=markets.df1[['month_num']], y=markets.df1[['pastoralists_index_rank']], group=site)) +
geom_line(aes(color=treatment))+
geom_point(aes(color=treatment))+
geom_vline(xintercept=8)+
#coord_cartesian(ylim = c(ymin, ymax)) +
ggtitle("title") +
theme_bw() +
theme(panel.grid.major = element_blank()) +
theme(plot.title = element_text(size=18)) +
xlab("xlab") +
ylab("ylab")
table(markets.df1$treatment)
markets.df1[markets.df1$treatment %in% 0.5]
markets.df1[markets.df1$treatment %in% 0.5,]
table(markets$treatment)
markets[markets$site %in% "ushata",]
setwd("C:/Users/cdgra/Google Drive/Africa/Nigeria - Farmer-Pastoralist/ecpn_work/analysis/academicPaper/obsDat/clean")
# fix treatment assignment
tapply(markets$treatment, markets$site, mean)
tapply(events$treatment, events$site, mean)
# fix treatment assignment
#tapply(markets$treatment, markets$site, mean)
markets[markets$site %in% "ushata", "treatment"]
# fix treatment assignment
#tapply(markets$treatment, markets$site, mean)
markets[markets$site %in% "ushata", "treatment"] <- 0
markets[markets$site %in% "ushata", "treatment"]
# check treatment assignment
tapply(events$treatment, events$site, mean)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
events <- read.csv("../raw/ecpn_events.csv")
markets <- read.csv("../raw/ecpn_markets.csv")
library(lubridate)
library(dplyr)
library(estimatr)
# Chunk 2
# clean white space, make lower case
markets$Community.Name <- trimws(tolower(markets$Community.Name))
markets$site <- markets$Community.Name
# make outcomes numeric
outcomes <- names(markets)[grepl("(market|farm|past)", names(markets))]
markets[,outcomes] <- sapply(markets[,outcomes], function(x) {as.numeric(as.character(x))}) # warning is fine, just making empty cells like <NA> into NA.
# fix treatment assignment
#tapply(markets$treatment, markets$site, mean)
markets[markets$site %in% "ushata", "treatment"] <- 0
# Chunk 3
# dichotomous before/after
##july 2016 - feb 2017
## sept 2017 - end
class(markets$date.of.observation..M.D.Y.)
markets$date <- lubridate::mdy(markets$date.of.observation..M.D.Y.)
markets$time <- ifelse(markets$date > "2017-03-01", 1, 0)
# date as numeric with 0 as first month and max(month) as last month
## make a "month" variable
markets$month <- sub("-[0-9]*$", "", markets$date)
table(markets$Community.Name, markets$month)
markets$month_num <- car::recode(as.character(markets$month),
"'2016-07'=0;
'2016-08'=1;
'2016-09'=2;
'2016-10'=3;
'2016-11'=4;
'2016-12'=5;
'2017-01'=6;
'2017-02'=7;
'2017-09'=14;
'2017-10'=15;
'2017-11'=16;
'2017-12'=17")
#03=8, 04=9, 05=10, 06=11, 07=12, 08=13
# Chunk 5
# rank the outcomes
# Rank-based outcomes since the raw outcomes are everywhere
## separate t1-t2 ranks
rankOutcomes <- paste0(outcomes, "_rank")
markets[, rankOutcomes] <- NA
markets[markets$time %in% 0,rankOutcomes] <- sapply(markets[markets$time %in% 0,outcomes], dense_rank)
markets[markets$time %in% 1,rankOutcomes] <- sapply(markets[markets$time %in% 1,outcomes], dense_rank)
#summary(markets[,rankOutcomes])
## combined -- I don't like this, don't want outcomes at t1 ranked with outcomes at t2.
#rankOutcomes <- paste0(outcomes, "_rank")
#markets[, rankOutcomes] <- NA
#markets[,rankOutcomes] <- sapply(markets[,outcomes], dense_rank)
# make sure ranked works
markets[order(markets$pastoralist_sellers),c("pastoralist_sellers", "pastoralist_sellers_rank")][1:10,]
# Chunk 6
# Make a "pastoralist" index and a "Farmer" index
markPastor <- names(markets)[grepl("pastor", names(markets))]
markPastor_rank <- markPastor[grepl("_rank", markPastor)]
markets$pastoralists_index_rank <- rowMeans(markets[,markPastor_rank])
markFarmers <- names(markets)[grepl("farm", names(markets))]
markFarmers_rank <- markFarmers[grepl("_rank", markFarmers)]
markets$farmers_index_rank <- rowMeans(markets[,markFarmers_rank])
# Revise outcome list to include the indices
outcomes <- names(markets)[grepl("(market|farm|past)", names(markets))]
# Chunk 7
# Chunk 8
# get rid of nothing columns
events <- events[,!grepl("^X", names(events))]
#lower case all non-numerics
typeList <- sapply(events, class)
lowNames <- names(typeList)[!typeList %in% "integer"]
events[,names(events) %in% lowNames] <- as.data.frame(sapply(events[,names(events) %in% lowNames], tolower))
#trim white space
events[,names(events) %in% lowNames] <- as.data.frame(sapply(events[,names(events) %in% lowNames], trimws))
# chris: if events has "marriage" in the level, just make it "marriage"
levels(events$event_type) <- c(NA, "festival", "marriage", "naming", 'other', "marriage")
# check treatment assignment
#tapply(events$treatment, events$site, mean)
# Chunk 9
# dichotomous before/after
##july 2016 - feb 2017
## sept 2017 - end
class(events$date.of.observation..M.D.Y.)
events$date <- lubridate::mdy(events$date.of.observation..M.D.Y.)
events$time <- ifelse(events$date > "2017-03-01", 1, 0)
# site
events$site <- events$Community.Name
# date as numeric with 0 as first month and max(month) as last month
## make a "month" variable
events$month <- sub("-[0-9]*$", "", events$date)
table(events$Community.Name, events$month)
events$month_num <- car::recode(as.character(events$month),
"'2016-07'=0;
'2016-08'=1;
'2016-09'=2;
'2016-10'=3;
'2016-11'=4;
'2016-12'=5;
'2017-01'=6;
'2017-02'=7;
'2017-09'=14;
'2017-10'=15;
'2017-11'=16;
'2017-12'=17")
# make outcomes numeric
eventOutcomes <- names(events)[grepl("(attend|eat)_", names(events))]
events[,eventOutcomes] <- sapply(events[,eventOutcomes], function(x) {as.numeric(as.character(x))}) # i think is already integer
# make pastoralist/farmers index outcomes - attend_grp, eat_grp
eventPastor <- names(events)[grepl("past", names(events))]
events$pastoralists_index <- rowMeans(events[,eventPastor])
eventFarmers <- names(events)[grepl("farm", names(events))]
events$farmers_index <- rowMeans(events[,eventFarmers])
# remake outcomes obj
eventOutcomes <- names(events)[grepl("(attend|eat)_|index", names(events))]
# make percentage outcomes
events[,paste0(eventOutcomes[2:3],"_presPerc")] <- events[,eventOutcomes[2:3]]/events[,eventOutcomes[1]]
events[,paste0(eventOutcomes[5:6],"_eatPerc")] <- events[,eventOutcomes[5:6]]/events[,eventOutcomes[4]]
# make perc index
eventPastorp <- names(events)[grepl("past_(pres|eat)Perc", names(events))]
events$pastoralistsPerc_index <- rowMeans(events[,eventPastorp])
eventFarmerp <- names(events)[grepl("farm_(pres|eat)Perc", names(events))]
events$farmersPerc_index <- rowMeans(events[,eventFarmerp])
# add %s to "eventOutcomes"
eventOutcomes <- names(events)[grepl("(attend|eat)_|index", names(events))]
#rank outcomes
events[,paste0(eventOutcomes, "_rank")] <- sapply(events[,eventOutcomes], rank)
rankEventOutcomes <- paste0(eventOutcomes, "_rank")
summary(events[,eventOutcomes])
# Chunk 10
save(events, file="a_events_clean.rda")
save(markets, file="a_markets_clean.rda")
save.image("a_obsDat_clean.rda")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
load("../clean/a_obsDat_clean.rda")
library(dplyr)
library(ggplot2)
library(estimatr)
# Chunk 2
markets.df <- markets[, c("State", "site", "treatment", "time",
"month_num", "date",
names(markets)[grepl("farm|past", names(markets))])]
# at site-level and month-level
markets.df1 <- markets.df %>%
dplyr::group_by(site,month_num) %>%
dplyr::summarise_all(funs(mean(., na.rm = TRUE))) %>%
as.data.frame()
#for now fix this way; later don't summarise_all this column
markets.df1$treatment <- as.factor(as.character(markets.df1$treatment))
#################
# at tr/co-level and month-level
markets.df2 <- markets.df %>%
dplyr::group_by(treatment,month_num) %>%
dplyr::summarise_all(funs(mean(., na.rm = TRUE))) %>%
as.data.frame()
markets.df2$treatment <- as.factor(as.character(markets.df2$treatment))
#########
# at site-level & t1/t2-level
markets.df1b <- markets.df %>%
dplyr::group_by(site,time) %>%
dplyr::summarise_all(funs(mean(., na.rm = TRUE))) %>%
as.data.frame()
markets.df1b$treatment <- as.factor(as.character(markets.df1b$treatment))
########
# at tr/co-level & t1/t2-level
markets.df2b <- markets.df %>%
dplyr::group_by(treatment,time) %>%
dplyr::summarise_all(funs(mean(., na.rm = TRUE))) %>%
as.data.frame()
markets.df2b$treatment <- as.factor(as.character(markets.df2b$treatment))
## manual plot to be functionized
### markets.df1 == site-level, month-level
### markets.df2b == tr/co-level, t1/t2-level.
ggplot(data=markets.df1, aes(x=markets.df1[['month_num']], y=markets.df1[['pastoralists_index_rank']], group=site)) +
geom_line(aes(color=treatment))+
geom_point(aes(color=treatment))+
geom_vline(xintercept=8)+
#coord_cartesian(ylim = c(ymin, ymax)) +
ggtitle("title") +
theme_bw() +
theme(panel.grid.major = element_blank()) +
theme(plot.title = element_text(size=18)) +
xlab("xlab") +
ylab("ylab")
## manual plot to be functionized
### markets.df1 == site-level, month-level
### markets.df2b == tr/co-level, t1/t2-level.
ggplot(data=markets.df2, aes(x=markets.df2[['month_num']], y=markets.df2[['pastoralists_index_rank']], group=site)) +
geom_line(aes(color=treatment))+
geom_point(aes(color=treatment))+
geom_vline(xintercept=8)+
#coord_cartesian(ylim = c(ymin, ymax)) +
ggtitle("title") +
theme_bw() +
theme(panel.grid.major = element_blank()) +
theme(plot.title = element_text(size=18)) +
xlab("xlab") +
ylab("ylab")
## manual plot to be functionized
### markets.df1 == site-level, month-level
### markets.df2b == tr/co-level, t1/t2-level.
ggplot(data=markets.df2, aes(x=markets.df2[['month_num']], y=markets.df2[['pastoralists_index_rank']], group=site)) +
geom_line(aes(color=treatment))+
geom_point(aes(color=treatment))+
geom_vline(xintercept=8)+
#coord_cartesian(ylim = c(ymin, ymax)) +
ggtitle("title") +
theme_bw() +
theme(panel.grid.major = element_blank()) +
theme(plot.title = element_text(size=18)) +
xlab("xlab") +
ylab("ylab")
## manual plot to be functionized
### markets.df1 == site-level, month-level
### markets.df2b == tr/co-level, t1/t2-level.
ggplot(data=markets.df2, aes(x=markets.df2[['month_num']], y=markets.df2[['pastoralists_index_rank']], group=treatment)) +
geom_line(aes(color=treatment))+
geom_point(aes(color=treatment))+
geom_vline(xintercept=8)+
#coord_cartesian(ylim = c(ymin, ymax)) +
ggtitle("title") +
theme_bw() +
theme(panel.grid.major = element_blank()) +
theme(plot.title = element_text(size=18)) +
xlab("xlab") +
ylab("ylab")
## manual plot to be functionized
### markets.df1 == site-level, month-level
### markets.df2b == tr/co-level, t1/t2-level.
ggplot(data=markets.df2b, aes(x=markets.df2[['time']], y=markets.df2b[['pastoralists_index_rank']], group=treatment)) +
geom_line(aes(color=treatment))+
geom_point(aes(color=treatment))+
geom_vline(xintercept=8)+
#coord_cartesian(ylim = c(ymin, ymax)) +
ggtitle("title") +
theme_bw() +
theme(panel.grid.major = element_blank()) +
theme(plot.title = element_text(size=18)) +
xlab("xlab") +
ylab("ylab")
## manual plot to be functionized
### markets.df1 == site-level, month-level
### markets.df2b == tr/co-level, t1/t2-level.
ggplot(data=markets.df2b, aes(x=markets.df2b[['time']], y=markets.df2b[['pastoralists_index_rank']], group=treatment)) +
geom_line(aes(color=treatment))+
geom_point(aes(color=treatment))+
geom_vline(xintercept=8)+
#coord_cartesian(ylim = c(ymin, ymax)) +
ggtitle("title") +
theme_bw() +
theme(panel.grid.major = element_blank()) +
theme(plot.title = element_text(size=18)) +
xlab("xlab") +
ylab("ylab")
7400+6880+50611+32880+48639
28949+6082
146410+209424+525927+35031
6082.36+525927.55+28949.89+209424.23+32880.34+50611.56+6880.78+7411.48
6082.36+525927.55+28949.89+209424.23+48639.32+32880.34+50611.56+6880.78+7411.48
6082.36+525927.55+28949.89+209424.23+48639.32
48639.32+32880.34+50611.56+6880.78+7411.48
209424+146423+525927+35031
916807-238231
(916807-238231)-526000
238231-132178
750000/250000
140000*3
150/750
3200/7000
3200/7500
100000/12
3200/8000
3200/14000
3125/8000
687*1.15
687*1.10
687*1.09
687*1.093
687*1.092
687*1.15
687*1.20
740/687
2718/42
